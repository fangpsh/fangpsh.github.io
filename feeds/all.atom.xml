<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fangpsh's blog</title><link href="https://fangpsh.github.io/" rel="alternate"></link><link href="https://fangpsh.github.io/feeds/all.atom.xml" rel="self"></link><id>https://fangpsh.github.io/</id><updated>2020-03-12T00:00:00+08:00</updated><entry><title>搭建IPv6 Only 测试环境</title><link href="https://fangpsh.github.io/posts/2020/2020-03-12.html" rel="alternate"></link><published>2020-03-12T00:00:00+08:00</published><updated>2020-03-12T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2020-03-12:/posts/2020/2020-03-12.html</id><summary type="html">&lt;p&gt;&lt;img alt="baidu.com" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228184346.png"&gt;&lt;/p&gt;
&lt;p&gt;macOS 可以开启&lt;a href="https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html"&gt;DNS64/NAT64&lt;/a&gt;，
简单快捷。但是mac mini 信号不太好，开发同学抱怨常常连不上，而且有多个组的同学要测试，再买几台mac mini 好 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="baidu.com" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228184346.png"&gt;&lt;/p&gt;
&lt;p&gt;macOS 可以开启&lt;a href="https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html"&gt;DNS64/NAT64&lt;/a&gt;，
简单快捷。但是mac mini 信号不太好，开发同学抱怨常常连不上，而且有多个组的同学要测试，再买几台mac mini 好像有点费钱。&lt;/p&gt;
&lt;p&gt;所以接了个活，用&lt;a href="https://openwrt.org/"&gt;OpenWrt&lt;/a&gt; 搭建几个IPv6 Only 测试环境。&lt;/p&gt;
&lt;h2&gt;选路由&lt;/h2&gt;
&lt;p&gt;看了下，Newifi  D2、斐讯K2P 、极路由以及小米部分版本均可以刷OpenWrt。先是在京东下单了一个小米R3G，到手后发现是R3G V2，其实是4A，坑爹，刷机还得接TTL。
转去咸鱼，挑了一个二手的&lt;a href="https://openwrt.org/toh/xiaomi/mir3g"&gt;小米R3G&lt;/a&gt;（V1，带USB）和 &lt;a href="https://openwrt.org/toh/hwdata/d-team/d-team_newifi_d2"&gt;Newifi D2&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;刷机&lt;/h2&gt;
&lt;p&gt;小米R3G到手需要先刷&lt;a href="https://breed.hackpascal.net/"&gt;Breed&lt;/a&gt;，再刷OpenWrt，基本按照网上的教程没啥问题，参考&lt;a href="https://blog.csdn.net/dvd_sun/article/details/89737513"&gt;小米路由器3G刷入OpenWrt&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;刷完breed遇到一个问题，无法启动，电脑线连WAN口，只能进入breed，搜来搜去，看到两个帖子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.right.com.cn/forum/thread-255438-2-1.html"&gt;我已经解决小米路由器3G刷breed后无法刷固件的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bilibili.com/read/cv796610/"&gt;小米路由器3G（R3G）刷入BREED无法刷固件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在breed环境设置界面删除normal_firmware_md5，保存重启，果然好了。&lt;/p&gt;
&lt;p&gt;Newifi D2 到手，卖家已经刷好breed 和定制版本的OpenWrt，不太喜欢，从openwrt.org 下载了一个升级包，覆盖即可。&lt;/p&gt;
&lt;h2&gt;DNS64/NAT64&lt;/h2&gt;
&lt;p&gt;基本是参考这篇帖子：&lt;a href="https://blog.csdn.net/dengxinfa/article/details/104218997"&gt;openwrt使用tayga/totd实现NAT64/DNS64&lt;/a&gt;，NAT64 安装tayga 照着配置没啥问题。除了tayga，还有一个新的项目&lt;a href="https://www.jool.mx/en/openwrt.html"&gt;Jool&lt;/a&gt;也可以实现NAT64。&lt;/p&gt;
&lt;p&gt;换源&lt;code&gt;/etc/opkg/distfeeds.conf&lt;/code&gt;，中科大源最近好像有点问题，换成清华：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;src/gz openwrt_core http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/targets/ramips/mt7621/packages
src/gz openwrt_kmods http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/targets/ramips/mt7621/kmods/4.14.171-1-2e88863ccdd594fb8e842df3c25842ee
src/gz openwrt_base http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/packages/mipsel_24kc/base
src/gz openwrt_luci http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/packages/mipsel_24kc/luci
src/gz openwrt_packages http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/packages/mipsel_24kc/packages
src/gz openwrt_routing http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/packages/mipsel_24kc/routing
src/gz openwrt_telephony http://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07.2/packages/mipsel_24kc/telephony
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考前面教程设置完成后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tayga-nat64 Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00
          inet6 addr: fe80::xxx:xxx:xxx:1fea/64 Scope:Link
          UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1500  Metric:1
          RX packets:36077 errors:0 dropped:0 overruns:0 frame:0
          TX packets:36793 errors:0 dropped:3 overruns:0 carrier:0
          collisions:0 txqueuelen:500
          RX bytes:15494186 (14.7 MiB)  TX bytes:15679087 (14.9 MiB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nv"&gt;@OpenWrt&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ping6&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;PING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;37.958&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;37.962&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;38.267&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;37.821&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;37.260&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;37.530&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;37.828&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;statistics&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transmitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;
&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;trip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;37.260&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;37.803&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;38.267&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;DNS64 需要totd，不过这软件在仓库中没了，需要交叉编译，有点麻烦。后来看到&lt;a href="https://microcai.org/2019/02/13/nat64.html"&gt;unbound&lt;/a&gt;，仓库里面也没有。那只能用&lt;a href="https://openwrt.org/docs/guide-user/services/dns/bind"&gt;bind&lt;/a&gt; 了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;opkg install bind-server
/etc/init.d/named enable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;修改配置&lt;code&gt;/etc/bind/named.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;listen-on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;53&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;listen-on-v6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;53&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;recursion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;yes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;allow-recursion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;allow-query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;allow-query-cache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;forwarders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;202.96.134.133&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;223.5.5.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;114.114.114.114&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;auth-nxdomain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;no&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;dns64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;9639&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::/&lt;/span&gt;&lt;span class="nt"&gt;96&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;参考tayga&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;中配额的前缀&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;openwrt 本身跑着一个dnsmasq，用作DNS 和DHCP 等服务，本来想通过&lt;a href="https://openwrt.org/docs/guide-user/base-system/dhcp"&gt;server=&lt;/a&gt; 配置，把请求转给bind，bind设置一个非53端口，
不过尝试了下好像有点问题，那就直接关掉dnsmasq 的dns 服务好了(设置port为0)：
&lt;code&gt;/etc/config/dhcp&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;config dnsmasq
        option port &amp;#39;0&amp;#39;
        option domainneeded &amp;#39;1&amp;#39;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;重启网络和named后，dig(&lt;code&gt;opkg install bind-tools&lt;/code&gt;)测试一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nv"&gt;@OpenWrt&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;qq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AAAA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;short&lt;/span&gt;
&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;b703&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;e223&lt;/span&gt;
&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nl"&gt;d81&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="nl"&gt;fd2e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;f49a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9639&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nl"&gt;b97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8912&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nv"&gt;@OpenWrt&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;完美。&lt;/p&gt;
&lt;p&gt;再关闭下Lan口的DHCP 即可，可以在网页上点点点，或者修改下配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...
config dhcp &amp;#39;lan&amp;#39;
        option interface &amp;#39;lan&amp;#39;
        option dhcpv6 &amp;#39;server&amp;#39;
        option ra &amp;#39;server&amp;#39;
        option ra_management &amp;#39;1&amp;#39;
        option ignore &amp;#39;1&amp;#39;
        option ra_default &amp;#39;1&amp;#39;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;配置项解释，可参考&lt;a href="https://www.douban.com/note/618429634/"&gt;DHCPv6 over PPPoE on OpenWrt / LEDE&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，感谢各位网友的教程:) 。&lt;/p&gt;</content><category term="2020"></category><category term="OpenWrt"></category><category term="IPv6"></category><category term="DNS64"></category><category term="NAT64"></category></entry><entry><title>ANAME、CNAME、DNAME</title><link href="https://fangpsh.github.io/posts/2018/2018-11-04.html" rel="alternate"></link><published>2018-11-04T00:00:00+08:00</published><updated>2018-11-04T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2018-11-04:/posts/2018/2018-11-04.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/CNAME_record"&gt;CNAME&lt;/a&gt; 很常见，一般人都很熟悉，将一个域名映射到另外一个域名。但是CNAME 有个限制，顶级域名（apex domain）不建议设置CNAME，因为会和MX 记 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/CNAME_record"&gt;CNAME&lt;/a&gt; 很常见，一般人都很熟悉，将一个域名映射到另外一个域名。但是CNAME 有个限制，顶级域名（apex domain）不建议设置CNAME，因为会和MX 记录冲突，详细解释：&lt;a href="https://www.v2ex.com/t/204489#26"&gt;为什么裸域名不可以设置 CNAME？#26&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ietf.org/rfc/rfc1912.txt"&gt;RFC1912:2.4 CNAME records&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A CNAME record is not allowed to coexist with any other data.  In other words, if suzy.podunk.xx is an alias for sue.podunk.xx, you can't also have an MX record for suzy.podunk.edu, or an A record, or even a TXT record...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以就诞生了&lt;a href="https://dnsmadeeasy.com/services/anamerecords/"&gt;ANAME&lt;/a&gt;，有些DNS 服务商叫做&lt;a href="https://support.dnsimple.com/articles/alias-record/"&gt;ALIAS&lt;/a&gt;，可以在apex domain 上实现类似CNAME 效果。第一次见到这个，是在配置&lt;a href="https://blog.github.com/2014-01-07-faster-more-awesome-github-pages/#apex-domain-examplecom---with-alias-or-a"&gt;Github Pages&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;目前只有一些国外的DNS 服务商支持：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://help.iwantmyname.com/customer/portal/articles/1599947-do-you-support-alias-or-aname-dns-records-"&gt;Do you support ALIAS or ANAME DNS records?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CloudFlare&lt;/li&gt;
&lt;li&gt;DNSMadeEasy&lt;/li&gt;
&lt;li&gt;DNSimple&lt;/li&gt;
&lt;li&gt;PointDNS&lt;/li&gt;
&lt;li&gt;Amazon Route 53 (only for hosting on AWS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过这是非标准的实现，生产环境还是少用为好。&lt;/p&gt;
&lt;h2&gt;DNAME&lt;/h2&gt;
&lt;p&gt;除了ANAME，CNAME，还有一个&lt;a href="https://www.ietf.org/rfc/rfc2672.txt"&gt;DNAME&lt;/a&gt;。DNAME 和CNAME 的区别是，CNAME 只是映射一个子域名，DNAME 映射的是整个子域名空间。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aaa.example.com CNAME bbb.example.org

还可以添加记录

a1.aaa.example.com CNAME  b1.bbb.example.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;aaa&lt;/code&gt; 的CNAME 只是表示把&lt;code&gt;aaa&lt;/code&gt;这个子域名映射过去，并不影响&lt;code&gt;*.aaa&lt;/code&gt;。但是如果DNAME 的话，就不一样了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aaa.example.com CNAME bbb.example.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个时候你再解析&lt;code&gt;a1.aaa.example.com&lt;/code&gt;，得到的实际是&lt;code&gt;a1.bbb.example.org&lt;/code&gt; 的结果。因为&lt;code&gt;aaa.example.com&lt;/code&gt; 节点包括其子节点都映射到了&lt;code&gt;bbb.example.org&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;更详细的例子可以参考台湾网友的这篇文章：&lt;a href="https://ssorc.tw/994"&gt;DNS的CNAME/DNAME傻傻分不清楚&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外DNAME 记录，国内的DNS 服务商也几乎都不支持╮(╯▽╰)╭ 。&lt;/p&gt;</content><category term="2018"></category><category term="DNS"></category></entry><entry><title>echo 输出导致SCP 失效的问题</title><link href="https://fangpsh.github.io/posts/2018/2018-08-11.html" rel="alternate"></link><published>2018-08-11T00:00:00+08:00</published><updated>2018-08-11T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2018-08-11:/posts/2018/2018-08-11.html</id><summary type="html">&lt;p&gt;搭建了一个跳板机，强制使用密钥对登陆机器，同时需要用户在本地开启&lt;code&gt;ForwardAgent&lt;/code&gt;，跳板机上创建&lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt;，透传私钥。然而常常有用户在 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;搭建了一个跳板机，强制使用密钥对登陆机器，同时需要用户在本地开启&lt;code&gt;ForwardAgent&lt;/code&gt;，跳板机上创建&lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt;，透传私钥。然而常常有用户在本地没有正确配置，导致上了跳板机之后，再SSH 就会失败，于是我在跳板机的&lt;code&gt;.bashrc&lt;/code&gt; 上写了一段检测脚本，如果变量&lt;code&gt;$SSH_AUTH_SOCK&lt;/code&gt; 不存在，就引导用户去看Wiki，不要烦我啦！&lt;/p&gt;
&lt;p&gt;用了一段时间，有用户发现scp 文件到跳板机时会失败，Google 一下：&lt;a href="https://stackoverflow.com/questions/12440287/scp-doesnt-work-when-echo-in-bashrc"&gt;SCP doesn't work when echo in .bashrc?&lt;/a&gt;，怎么判断当前会话是scp？：&lt;a href="https://superuser.com/questions/690735/can-i-tell-if-im-in-an-scp-session-in-my-bashrc"&gt;Can I tell if I'm in an scp session in my .bashrc?&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;改下脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PS1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;创建SSH_AUTH_SOCK 失败！&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.请在本机执行 ssh-add 添加私钥至 ssh-agent&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.请在~/.ssh/config 配置：ForwardAgent yes&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;详细帮助：wiki...&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;搞定！&lt;/p&gt;</content><category term="2018"></category><category term="SSH"></category><category term="linux"></category></entry><entry><title>《HTTP/2 基础教程》读书笔记</title><link href="https://fangpsh.github.io/posts/2018/2018-02-06.html" rel="alternate"></link><published>2018-02-06T00:00:00+08:00</published><updated>2018-02-06T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2018-02-06:/posts/2018/2018-02-06.html</id><summary type="html">&lt;p&gt;&lt;img alt="http2" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230227141517.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最近拿到一本新书：&lt;a href="https://book.douban.com/subject/27665112/"&gt;《HTTP/2 基础教程》&lt;/a&gt;，薄薄一本，除去附录100页不到，卖的挺贵，49元。《精通正则表达式》的译者余晟为这书写了序，也在他的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="http2" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230227141517.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最近拿到一本新书：&lt;a href="https://book.douban.com/subject/27665112/"&gt;《HTTP/2 基础教程》&lt;/a&gt;，薄薄一本，除去附录100页不到，卖的挺贵，49元。《精通正则表达式》的译者余晟为这书写了序，也在他的个人公众号上推荐，读完却觉得作为基础教程还不错，翻译上觉得略生硬。作点简单的笔记，方便以后“按图索骥”。&lt;/p&gt;
&lt;h2&gt;3.1.2 关键性能指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;延迟&lt;ul&gt;
&lt;li&gt;延迟是制约Web 性能的主要瓶颈，后文还会提到，丢包会严重影响HTTP/2 的性能&lt;/li&gt;
&lt;li&gt;这就是为什么CDN 的边缘节点要近可能的靠近目标用户，做到本地覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;带宽&lt;ul&gt;
&lt;li&gt;带宽可能会成为性能的瓶颈，不过对于普通的网页，目前大多数用户的带宽已经不是瓶颈，延时和丢包更加重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS 查询&lt;ul&gt;
&lt;li&gt;网址的域名解析，网页内各项资源的域名解析时间，这块查询时间占比较大，特别是在移动端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立连接的时间&lt;ul&gt;
&lt;li&gt;TCP 三次握手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLS 协商时间&lt;ul&gt;
&lt;li&gt;采用HTTPS 之后，TLS 握手，TLS 1.2 需要消耗2个RTT，不过新的TLS1.3 只需要1个RTT。&lt;/li&gt;
&lt;li&gt;针对TLS 有非常多的优化手段，建议阅读&lt;a href="https://book.douban.com/subject/25856314/"&gt;《Web 性能权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首字节时间（TTFB）&lt;ul&gt;
&lt;li&gt;客户端开始访问网页，到收到服务器响应的第一个字节的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容下载时间&lt;ul&gt;
&lt;li&gt;从客户端开始访问，到最后一个响应字节到达客户端的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开始渲染时间&lt;ul&gt;
&lt;li&gt;用户看到空白页面的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档加载完成时间（又叫页面加载时间）&lt;ul&gt;
&lt;li&gt;浏览器认为页面加载完毕的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;互联网发展，遇到的挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更多的字节：页面资源的体积变大&lt;/li&gt;
&lt;li&gt;更多的资源：页面资源数量变多&lt;/li&gt;
&lt;li&gt;更高的复杂度： 页面越来越复杂，渲染变长&lt;/li&gt;
&lt;li&gt;更多的域名： 一个页面包含的域名越来越多，增加了DNS 查询耗时、建立连接耗时、TLS 协商耗时。&lt;/li&gt;
&lt;li&gt;更多的TCP socket：浏览器会对同一个域名开启多个连接，这增加了服务器协商耗时，加重设备负担，有可能导致网络过载等问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3.1.3 HTTP/1 的问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;队头堵塞&lt;ul&gt;
&lt;li&gt;HTTP/1 有个特性叫管道化（pipelining），允许一次发送一组请求，当时只能按照发送顺序依次接收请求，&lt;/li&gt;
&lt;li&gt;在应答过程中，如果有一个请求阻塞了，后续所有工作都会被阻塞。现代浏览器会对单个域名开启6个连接，当时每个连接还是会受到“队头阻塞”的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;低效的TCP 利用&lt;ul&gt;
&lt;li&gt;拥塞控制算法，慢启动，以及拥塞避免，TCP 并不高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;臃肿的消息首部&lt;ul&gt;
&lt;li&gt;HTTP/1 消息头部无法被压缩，如果再带上cookies，有个几千字节很常见。大量请求下，消息头的占比不可忽视。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;受限的优先级设置&lt;ul&gt;
&lt;li&gt;处理高优先级的资源时，不会对低优先级的资源发起请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三方资源&lt;ul&gt;
&lt;li&gt;日益增多的第三方资源引用，消耗了大量资源。HTTP/2 对此也束手无策。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3.2.1 Web 性能的最佳实践&lt;/h2&gt;
&lt;h3&gt;1. DNS 查询优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;限制不同域名的数量。&lt;/li&gt;
&lt;li&gt;保证低限度的解析延迟，定期监控用户分布所有地区的解析时间。&lt;/li&gt;
&lt;li&gt;在主体页面HTML 活响应中利用&lt;a href="https://www.w3.org/TR/resource-hints/#dns-prefetch"&gt;DNS 预取命令&lt;/a&gt;。
 例：
 &lt;code&gt;&amp;lt;link rel="dns-prefetch" hrefp="//ajax.googleapis.com"&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 优化TCP 连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;利用&lt;a href="https://www.w3.org/TR/resource-hints/#preconnect"&gt;preconnect&lt;/a&gt; 指令。
 例：
 &lt;code&gt;&amp;lt;link rel="preconnect" href="//fonts.example.com" crossorigin&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽早终止并响应，借助CDN，降低RTT，尽快响应。&lt;/li&gt;
&lt;li&gt;实施最新的&lt;a href="https://istlsfastyet.com/"&gt;TLS 最佳实践&lt;/a&gt;来优化HTTPS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 避免重定向&lt;/h3&gt;
&lt;p&gt;重定向通常会触发与额外域名建立连接，简单的解决方案就是彻底消灭重定向。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用CDN 代替客户端在云端实现重定向，意思就是让CDN 重定向去取回资源再返回给客户端。&lt;/li&gt;
&lt;li&gt;如果是同一域名的重定向，利用Web 服务器上的rewrite 规则，避免重定向。例如Nginx、Apache 里面的rewrite，客户端无需再发起一次请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 客户端缓存&lt;/h3&gt;
&lt;p&gt;客户端直接使用本地缓存是最快的。建议所有的静态资源名称都带上一个随机的ID，然后给一个超长的缓存时间即可。部分需要更新的资源，可以按需调整缓存时间。&lt;/p&gt;
&lt;h3&gt;5. 网络边缘的缓存&lt;/h3&gt;
&lt;p&gt;利用CDN，缓存部分数据。如果一份资源需要缓存，它必须满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在多用户间可共享，并且&lt;/li&gt;
&lt;li&gt;能够接受一定程度的旧数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户的隐私信息、以及贵时间敏感的内容都不可以缓存。&lt;/p&gt;
&lt;h3&gt;6. 条件缓存&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;Last-Modified-Since&lt;/code&gt;，&lt;code&gt;ETag&lt;/code&gt; 等头部检查服务端资源更新情况，如果没更新，服务端返回304，否则返回新的资源。&lt;/p&gt;
&lt;h3&gt;7. 压缩和代码极简化&lt;/h3&gt;
&lt;p&gt;去除前端代码里面多余的注释、空格、换行，牺牲可读性降低体积，再通过gzip、deflate、Brotli等算法压缩传输。&lt;/p&gt;
&lt;h3&gt;8. 避免阻塞CSS/JS&lt;/h3&gt;
&lt;p&gt;CSS 要放在head 标签里，在任何JS 和图片前面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定期校验JS 资源的使用情况，清楚不再需要的资源。&lt;/li&gt;
&lt;li&gt;如果JS 执行顺序无关紧要，并且必须在onload 事件触发之前运行，可以设置&lt;a href="http://caniuse.com/#search=async"&gt;async 属性&lt;/a&gt;，
 例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &amp;lt; script async src=&amp;quot;/js/myfile.js&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;如果JS 执行顺序很重要，并且也能接受脚本在DOM 加载完之后运行，可以使用defer 属性，
 例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &amp;lt;script defer src=&amp;quot;/js/myjs.js&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;对于不行影响到页面初次展示的JS脚本，必须在onload 事件触发之后请求（处理）它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;9. 图片优化&lt;/h3&gt;
&lt;p&gt;图片越来越多，针对图片的2条优化建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除图片元信息，例如题材、地理信息、时间戳、尺寸和像素信息等。&lt;/li&gt;
&lt;li&gt;针对不同设备提供不同尺寸的图片，另外例如七牛、又拍云等CDN 厂商都提供图片处理服务，使用起来简单快捷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于图片优化可以阅读书籍：&lt;a href="http://shop.oreilly.com/product/0636920039730.do"&gt;《High Performance Images》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;之前也整理过一篇：[[图片优化笔记]]。&lt;/p&gt;
&lt;h2&gt;3.2.2 反模式&lt;/h2&gt;
&lt;h2&gt;4.3 撤销针对HTTP/1.1 的优化&lt;/h2&gt;
&lt;h2&gt;6.7 HTTP/2 反模式&lt;/h2&gt;
&lt;p&gt;一些在HTTP/1.X 上使用的优化手段，若应用到HTTP/2 上，会适得其反，书里有三个地方都提到了“反模式”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成精灵图和资源合并/内联：对于HTTP/2 来说，使用精灵图没有意义。也不要将资源进行合并，缓存控制上会不方便，粒度太粗。&lt;/li&gt;
&lt;li&gt;域名拆分：迁移到HTTP/2 需要收拢域名。&lt;/li&gt;
&lt;li&gt;禁用cookie的域名：HTTP/2 中，头部信息会被压缩，无需再对特定域名禁用cookie。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="null" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230227141750.png"&gt;&lt;/p&gt;
&lt;h2&gt;5. HTTP/2 协议&lt;/h2&gt;
&lt;p&gt;第五章介绍了HTTP/2 协议的一些细节，帧结构、流、流量控制、优先级、服务端推送、首部压缩等内容，内容很多，每一块要理解透彻内容很多，具体还是得看书，外加查询其他资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/ht你tp2/?hl=zh-cn"&gt;HTTP/2 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/creeperyang/blog/issues/23"&gt;HTTP2简介和基于HTTP2的Web优化 #23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogjava.net/yongboy/archive/2015/03/20/423655.html"&gt;HTTP/2笔记之帧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imququ.com/post/header-compression-in-http2.html"&gt;HTTP/2 头部压缩技术介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogjava.net/yongboy/archive/2015/03/19/423611.html"&gt;HTTP/2笔记之流和多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1r7QXGYOLCh4fcUq0jDdDwKJWNqWK1o4xMtYpKZCJYjM/present?slide=id.gae999cde7_0_167"&gt;HTTP2 is here, let's optimize!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://http2.github.io/http2-spec/"&gt;Hypertext Transfer Protocol Version 2 (HTTP/2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. HTTP/2 性能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;并非所有请求在任何情况下都会从HTTP/2 受益；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟：超过一定带宽之后（实验值是5Mbit/s ），增加带宽不会减少延迟，RTT 对性能的影响更新敏感；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丢包：丢包对HTTP/2 影响非常大，因为一个域名就一个连接。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;性能优化因人而异&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注重测试，要遵循业界推荐的方式，但也不要陷入过早优化的陷阱，应当让数据为你的优化指引方向。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;8. HTTP/2 调试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chrome 开发者工具&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chrome://net-internals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Inspect -&amp;gt; Network&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firefox 开发者工具&lt;/li&gt;
&lt;li&gt;iOS：Charles Proxy&lt;/li&gt;
&lt;li&gt;Android：手机端-开发者模式-USB调试（USB debugging），PC-Chrome-开发者工具-Remote devices&lt;/li&gt;
&lt;li&gt;WebPagetest&lt;/li&gt;
&lt;li&gt;OpenSSL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nghttp2.org"&gt;nghttp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v --http2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bradfitz/http2/tree/master/h2i"&gt;h2i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;/ul&gt;</content><category term="2018"></category><category term="http"></category></entry><entry><title>drop_caches</title><link href="https://fangpsh.github.io/posts/2018/2018-01-25.html" rel="alternate"></link><published>2018-01-25T00:00:00+08:00</published><updated>2018-01-25T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2018-01-25:/posts/2018/2018-01-25.html</id><summary type="html">&lt;p&gt;&lt;img alt="atemyram" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228184158.png"&gt;
&lt;a href="https://www.linuxatemyram.com"&gt;Don't Panic! Your ram is fine!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;问题排查&lt;/h2&gt;
&lt;p&gt;一台机器的CPU iowait 非常高，perf 分析发现耗时都在&lt;code&gt;isolate_freepages_block&lt;/code&gt; 函数，iostat 看系统盘的iops 也达到瓶颈，free 查看机器内 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="atemyram" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228184158.png"&gt;
&lt;a href="https://www.linuxatemyram.com"&gt;Don't Panic! Your ram is fine!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;问题排查&lt;/h2&gt;
&lt;p&gt;一台机器的CPU iowait 非常高，perf 分析发现耗时都在&lt;code&gt;isolate_freepages_block&lt;/code&gt; 函数，iostat 看系统盘的iops 也达到瓶颈，free 查看机器内存 buff/cache 占了很大一部分，free 快没了。网友的类似状况： &lt;a href="http://www.yangguanjun.com/2016/09/12/ceph-node-high-workload-issue/"&gt;Ceph节点load很高问题的分析解决&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;程序对文件系统大量的随机读写，&lt;a href="https://en.wikipedia.org/wiki/Page_cache"&gt;page cache&lt;/a&gt; 上涨，内存吃紧，page cache 不断换入换出，磁盘瓶颈，CPU 堵住。&lt;/p&gt;
&lt;p&gt;可以临时drop 掉：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;echo 1 &amp;gt; /proc/sys/vm/drop_caches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;想要也释放脏页，先执行&lt;code&gt;sync&lt;/code&gt;，再drop。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a non-destructive operation and will not free any dirty objects.
To increase the number of objects freed by this operation, the user may run
`sync' prior to writing to /proc/sys/vm/drop_caches.  This will minimize the
number of dirty objects on the system and create more candidates to be
dropped.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外一种类似的情况是reclaimable slab objects 占用高（dentries，inodes），分析过程可参考：&lt;a href="http://colobu.com/2017/03/07/what-is-in-linux-cached/"&gt;谁吃了我的Linux内存?&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;echo 2 &amp;gt; /proc/sys/vm/drop_caches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;解决方法，换大内存机器，或者慢慢调整系统的&lt;code&gt;proc/sys/vm/pagecache_limit*&lt;/code&gt; 等参数，还有文件系统的&lt;code&gt;/proc/sys/vm/dirty_*&lt;/code&gt;，没太多经验，瞎子过河。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;To free pagecache:
echo 1 &amp;gt; /proc/sys/vm/drop_caches
To free reclaimable slab objects (includes dentries and inodes):
echo 2 &amp;gt; /proc/sys/vm/drop_caches
To free slab objects and pagecache:
echo 3 &amp;gt; /proc/sys/vm/drop_caches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;默认值是0，写入1 drop pagecache，写入2 drop reclaimable slab objects，写入3 都释放。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;linux/fs/drop_caches.c&lt;/h2&gt;
&lt;h3&gt;问题一：echo 写入之后，值不会变，怎么办？会不会一直在drop？&lt;/h3&gt;
&lt;p&gt;不会，看看代码：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/torvalds/linux/blob/master/fs/drop_caches.c#L39"&gt;linux/fs/drop_caches.c&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;drop_caches_sysctl_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;ctl_table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loff_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ppos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;proc_dointvec_minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stfu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sysctl_drop_caches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;iterate_supers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drop_pagecache_sb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;count_vm_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DROP_PAGECACHE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sysctl_drop_caches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;drop_slab&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;count_vm_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DROP_SLAB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;stfu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;pr_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s (%d): drop_caches: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;comm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task_pid_nr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;sysctl_drop_caches&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;stfu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sysctl_drop_caches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;write 为True 的时候，才会执行drop 。&lt;/p&gt;
&lt;p&gt;另外&lt;a href="https://www.fsl.cs.sunysb.edu/kernel-api/re449.html"&gt;proc_dointvec_minmax()&lt;/a&gt; 这个函数的作用是检查传入的值符合大小，drop_cache 允许的值是1，2，3，4。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reads/writes up to table-&amp;gt;maxlen/sizeof(unsigned int) integer values from/to the user buffer, treated as an ASCII string.&lt;br&gt;
This routine will ensure the values are within the range specified by table-&amp;gt;extra1 (min) and table-&amp;gt;extra2 (max).&lt;br&gt;
Returns 0 on success.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/torvalds/linux/blob/2ce079f04d5914dae14fdc8618f804cc0d2a1b8f/kernel/sysctl.c#L1399,L1407"&gt;linux/kernel/sysctl.c&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;procname&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;drop_caches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sysctl_drop_caches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxlen&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc_handler&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drop_caches_sysctl_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra1&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra2&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;four&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然默认值是0，但是如果你尝试写回0，是会失败的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;invalid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外可以看到&lt;code&gt;sysctl_drop_caches&lt;/code&gt; 为3(11b) 时，和1，2 做&amp;amp; 操作，都为True，所以都会drop。&lt;/p&gt;
&lt;h3&gt;问题二：echo 写入4，是什么效果？&lt;/h3&gt;
&lt;p&gt;4(100b)，和1，2做&amp;amp; 操作，都为False，所以不会drop，相当于关闭了drop 功能。&lt;/p&gt;
&lt;p&gt;stfu 为静态变量，第一次执行之后，stfu 为4，&lt;code&gt;if (!stfu)&lt;/code&gt; 也始终为False。不过感觉这里有个问题，echo 4 一次之后，stfu 会始终为4，即使再echo 1|2|3，都无法改变，虽然能正常drop，但是pr_info 语句无法执行，dmesg 看不到日志，除非重启。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;stfu |= sysctl_drop_caches &amp;amp; 4;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hoytech.com/vmtouch/"&gt;vmtouch - the Virtual Memory Toucher&lt;/a&gt;，这个工具非常好用&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linuxperf.com/?p=142"&gt;/PROC/MEMINFO之谜&lt;/a&gt;，这篇文章对系统内存介绍的非常详细&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和这篇笔记主题无关的一个问题，也值得深究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jaseywang.me/2012/10/21/numa-在-db-上的一些问题/"&gt;NUMA 在 DB 上的一些问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cenalulu.github.io/linux/numa/"&gt;NUMA架构的CPU -- 你真的用好了么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zhangliyong.github.io/posts/2014/04/09/mongodb-numa-dao-zhi-de-xing-neng-wen-ti.html"&gt;Mongodb NUMA 导致的性能问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt"&gt;kernel.org/doc/Documentation/sysctl/vm.txt&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;

&lt;span class="n"&gt;Writing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;well&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;
&lt;span class="n"&gt;reclaimable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slab&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dentries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Once&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dropped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;their&lt;/span&gt;
&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;becomes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pagecache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reclaimable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slab&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;includes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dentries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slab&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pagecache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;destructive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;freed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;may&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; prior to writing to /proc/sys/vm/drop_caches.  This will minimize the&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;
&lt;span class="n"&gt;dropped&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;means&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;growth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;various&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caches&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dentries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pagecache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;These&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;automatically&lt;/span&gt;
&lt;span class="n"&gt;reclaimed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;needed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elsewhere&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;performance&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Since&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;discards&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt;
&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;may&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;significant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recreate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="n"&gt;dropped&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;especially&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;they&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;were&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;heavy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;outside&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;debugging&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recommended&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;may&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;informational&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;These&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;informational&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;They&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;anything&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wrong&lt;/span&gt;
&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;drop_caches&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="2018"></category><category term="linux"></category></entry><entry><title>关于Bash 你需要知道的十件事</title><link href="https://fangpsh.github.io/posts/2018/2018-01-22.html" rel="alternate"></link><published>2018-01-22T00:00:00+08:00</published><updated>2018-01-22T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2018-01-22:/posts/2018/2018-01-22.html</id><summary type="html">&lt;p&gt;读到一篇文章&lt;a href="https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/"&gt;《Ten Things I Wish I’d Known About bash》&lt;/a&gt;，所以有了这个畅销书式的标题，一些笔记。&lt;br&gt;
感觉作者写这本书主要是为了推销他的新 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;读到一篇文章&lt;a href="https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/"&gt;《Ten Things I Wish I’d Known About bash》&lt;/a&gt;，所以有了这个畅销书式的标题，一些笔记。&lt;br&gt;
感觉作者写这本书主要是为了推销他的新书&lt;a href="https://leanpub.com/learnbashthehardway"&gt;《Learn Bash the Hard Way》&lt;/a&gt;，不过其中十个关于Bash 的点，倒是挺有趣。&lt;/p&gt;
&lt;h2&gt;1) ` ` vs $()&lt;/h2&gt;
&lt;p&gt;这2个符号的效果一样，它们包含的内容都会被执行，然后再把结果赋值给变量，或者传递给其他命令，很常用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`ls`&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我个人常用&lt;code&gt;` `&lt;/code&gt;，$() 不常用，它们2个有啥区别呢？看个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\\`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inside&lt;span class="se"&gt;\\\`\`&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;inside&lt;span class="k"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2条语句效果一样，不过后者可读性明显好太多，以后写这种嵌套命令的时候，用&lt;code&gt;$()&lt;/code&gt;吧，不然debug 起来得瞎眼。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mywiki.wooledge.org/BashFAQ/082"&gt;Why is $(...) preferred over `...` (backticks)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/4708549/what-is-the-difference-between-command-and-command-in-shell-programming"&gt;What is the difference between $(command) and `command` in shell programming?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有个小插曲，我不知道怎么用Markdown 写出反引号（backticks）内一对反引号的效果: &lt;code&gt;` `&lt;/code&gt; ，发了一条tweet，得到了答案，这个符号好像也可以叫：&lt;a href="https://en.wikipedia.org/wiki/Double_grave_accent"&gt;grave accent&lt;/a&gt;，沉音符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;`` ` ` `` 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2) 通配符 vs 正则表达式&lt;/h2&gt;
&lt;p&gt;这2个是完全不一样的东西，不懂作者说容易搞混。。。作者给的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#输出目录下所有的文件&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;*

&lt;span class="c1"&gt;#输出目录下所有以. 开头的文件，是通配符，不是正则&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;.*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3) 返回码（Exit Codes）&lt;/h2&gt;
&lt;p&gt;Bash 的世界，0 是正常，非0 是异常。&lt;code&gt;echo $?&lt;/code&gt; 可以得到上一条命令的返回码。其实是不是应该按照翻译叫退出码，不过编译语言里&lt;code&gt;return&lt;/code&gt; 都叫返回码嘛。&lt;/p&gt;
&lt;p&gt;常常用grep 的返回码来判断特定内容是否存在，是因为如果存在grep 会返回0，不存在返回1，放在if 语句里面，非常直观、方便！见下文。&lt;/p&gt;
&lt;h2&gt;4) if 语句，[ 和 [[&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;not_there&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;hi
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lo
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上脚本执行，输出lo ，非常直观有木有。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&lt;/code&gt; 和&lt;code&gt;[[&lt;/code&gt; 的差别，前者好像是内置命令，后者是关键词，一般尽量用后者就是了，比较方便。详细区别对比：&lt;a href="http://blog.csdn.net/hittata/article/details/8049665"&gt;BASH 中单括号和双括号&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 直接执行会出错，$(grep note_there /dev/null) 输出为空，就变成了[ = &amp;#39;&amp;#39; ] ，&lt;/span&gt;
&lt;span class="c1"&gt;# 这也就是为什么常常在一些老脚本里面看到这样的语句： [ x$(...) = &amp;#39;&amp;#39;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;not_there&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;hi
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;lo
&lt;span class="k"&gt;fi&lt;/span&gt;


&lt;span class="c1"&gt;# [[ 就没有以上困扰&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;not_there&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;hi
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;lo
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5) set&lt;/h2&gt;
&lt;p&gt;脚本开头我一般都会加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set -eu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-u 表示遇到没定义的变量的时候，直接退出，可以防止如下的悲剧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ROOT&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果&lt;code&gt;${ROOT}&lt;/code&gt; 没赋值，会发生什么？&lt;/p&gt;
&lt;p&gt;-e 表示执行过程中遇到非0 的退出状态码，直接退出，结束执行，也可以防止某些异常情况。&lt;/p&gt;
&lt;p&gt;完整的选择列表和解释：&lt;a href="http://tldp.org/LDP/abs/html/options.html"&gt;Advanced Bash-Scripting Guide: Chapter 33. Options&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;6) &amp;lt;()&lt;/h2&gt;
&lt;p&gt;作者说的这个我倒不常用，看起来挺方便。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;somestring&lt;span class="w"&gt; &lt;/span&gt;file1&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/a
$&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;somestring&lt;span class="w"&gt; &lt;/span&gt;file2&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/b
$&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;/tmp/a&lt;span class="w"&gt; &lt;/span&gt;/tmp/b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以简化为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;diff&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;somestring&lt;span class="w"&gt; &lt;/span&gt;file1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;somestring&lt;span class="w"&gt; &lt;/span&gt;file2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;7) Quoting&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A=&amp;#39;123&amp;#39;
echo &amp;quot;$A&amp;quot;
echo &amp;#39;$A&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;单引号里面的内容不会展开，输出结果为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;123&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;作者文章里面这个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p tmp
cd tmp
touch a
echo &amp;quot;*&amp;quot;
echo &amp;#39;*&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不知道是因为版本原因还是配置问题，在我的机器上测试，都是输出 &lt;code&gt;*&lt;/code&gt;，作者说的意想不到的结果大概是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;echo *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;会输出当前目录下所有的文件名。&lt;/p&gt;
&lt;h2&gt;8) 最常用的三个快捷操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!!&lt;/code&gt;,重复执行上一条命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;，展开为当前用户的home 目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者列了他最常用的3个快捷操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!@&lt;/code&gt;，展开为上一条命令的所有参数；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!:1-$&lt;/code&gt;：这条命令看着有点复杂，&lt;code&gt;!&lt;/code&gt;表示上一条命令，&lt;code&gt;:&lt;/code&gt;是分隔符，后面就是表示取到第几位。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!:2-3&lt;/code&gt;，展开为上一条命令的参数中的第2到第3位的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash-3.2$ echo 1 2 3 4 5
1 2 3 4 5
bash-3.2$ echo !:2-3
2 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:h&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep isthere /long/path/to/some/file/or/other.txt
cd !$:h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;!$:h&lt;/code&gt; 展开为 上一条命令最后一个参数的目录路径："/long/path/to/some/file/or"。&lt;/p&gt;
&lt;h2&gt;9) 启动顺序&lt;/h2&gt;
&lt;p&gt;&lt;img alt="shell-startup-actual" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228182436.png"&gt;&lt;/p&gt;
&lt;p&gt;作者放了1个图，左边是Bash，右边是Zsh，来源是：&lt;a href="https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html"&gt;Shell startup scripts&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;非常有趣、直观，顺着一种颜色看，Bash 启动过程，期间加载的文件，一目了然。读这篇文章，最大的收获就是见到这张图。&lt;/p&gt;
&lt;h2&gt;10) getopts (cheapci)&lt;/h2&gt;
&lt;p&gt;作者说的&lt;a href="https://github.com/ianmiell/cheapci"&gt;chepci&lt;/a&gt; 这个项目没咋看，不过这段脚本里的片段 可以作为学习getopts 的&lt;a href="https://github.com/ianmiell/cheapci/blob/master/cheapci#L33-L95"&gt;例子&lt;/a&gt;。&lt;/p&gt;</content><category term="2018"></category><category term="bash"></category><category term="shell"></category><category term="linux"></category></entry><entry><title>《Web 性能权威指南》读书笔记</title><link href="https://fangpsh.github.io/posts/2016/2016-11-01.html" rel="alternate"></link><published>2016-11-01T00:00:00+08:00</published><updated>2016-11-01T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2016-11-01:/posts/2016/2016-11-01.html</id><summary type="html">&lt;p&gt;&lt;img alt="bookcover" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164135.png"&gt;&lt;/p&gt;
&lt;p&gt;看&lt;a href="https://book.douban.com/subject/25856314/"&gt;《Web 性能权威指南》&lt;/a&gt;的起因是在看&lt;a href="https://book.douban.com/subject/26869219/"&gt;《HTTPS 权威指南》&lt;/a&gt;的时候，看到优化相关的，然后就延伸到想看一下这本书。&lt;br&gt;
这本书，作者提供了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="bookcover" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164135.png"&gt;&lt;/p&gt;
&lt;p&gt;看&lt;a href="https://book.douban.com/subject/25856314/"&gt;《Web 性能权威指南》&lt;/a&gt;的起因是在看&lt;a href="https://book.douban.com/subject/26869219/"&gt;《HTTPS 权威指南》&lt;/a&gt;的时候，看到优化相关的，然后就延伸到想看一下这本书。&lt;br&gt;
这本书，作者提供了免费的&lt;a href="https://hpbn.co/"&gt;在线英文版&lt;/a&gt;，建议还是看英文的，中文翻译版有些地方略生硬。&lt;/p&gt;
&lt;h2&gt;TCP 优化&lt;/h2&gt;
&lt;p&gt;这部分从协议出发，讲解了优化的要点。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三次握手带来的延迟使得创建每创建一个新的TCP连接都要付出很大的代价。而这也决定了提高TCP应用性能的关键，在于想办法重用连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到重用连接在后续的HTTP 优化都是重点。&lt;br&gt;
第二章分内容和《HTTPS 权威指南》的9.1 有重合，可以都看下。  &lt;/p&gt;
&lt;h3&gt;把服务器内核升级到最新版本（Linux： 3.2+)&lt;/h3&gt;
&lt;p&gt;新内核能获得更好的性能，例如采用了PRR，比例降速算法。&lt;/p&gt;
&lt;h3&gt;确保cwnd 大小为10；&lt;/h3&gt;
&lt;p&gt;增大拥塞窗口，10表示10个&lt;a href="https://en.wikipedia.org/wiki/Maximum_segment_size"&gt;MSS&lt;/a&gt;，以太网标准的MSS 是1460。&lt;br&gt;
前面提到内核升级也可以带来好处，Linux 3.2+ 的内核，cwnd都是默认10。&lt;br&gt;
&lt;img alt="OS_CWND" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164224.png"&gt;&lt;br&gt;
图片来源：cdnplanet.com&lt;/p&gt;
&lt;p&gt;关于更改initcwnd、查看系统的initcwnd，可以参考:&lt;br&gt;
&lt;a href="http://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/"&gt;Tuning initcwnd for optimum performance&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;这一部分可以再看看火丁笔记的&lt;a href="http://huoding.com/2013/11/21/299"&gt;《浅谈TCP优化》&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;禁用空闲后的慢启动&lt;/h3&gt;
&lt;p&gt;主要是存在长连接的时候，要确保把这个给关了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.tcp_slow_start_after_idle&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;确保启动窗口缩放&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.tcp_windows_scaling&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;减少传输冗余数据&lt;/h3&gt;
&lt;p&gt;应用程序注意能少发数据就少发，这在后面的移动设备App优化上也是重点，移动网络的启动更加耗时和耗电。&lt;/p&gt;
&lt;h3&gt;压缩要传输的数据&lt;/h3&gt;
&lt;p&gt;例如web server 开启gzip，对js、css 做压缩。&lt;/p&gt;
&lt;h3&gt;把服务器放到离用户近的地方减少往返的时间&lt;/h3&gt;
&lt;p&gt;部署CDN，一方面边缘节点能够缓存文件，直接返回给用户。如果是需要回源的话，边缘节点如果能和回源保持长连接，这样可以降低用户访问整个耗时，因为用户只需要和边缘节点三次握手，距离近，耗时更短。&lt;br&gt;
另外在部署HTTPS 的时候，除了TCP握手，还需要TLS握手，如果让边缘节点提供HTTPS，然后以HTTP向后反代，也是一种优化吧。现在CDN 厂商都支持HTTPS了，配置回源的时候选择HTTP 相比HTTPS 会更快，给源站的压力也更小一些，而且在IDC之间，运营商那台恶心的劫持问题应该少很多吧。&lt;/p&gt;
&lt;h3&gt;尽最大可能重用已经建立的TCP 连接&lt;/h3&gt;
&lt;h2&gt;UDP 优化&lt;/h2&gt;
&lt;p&gt;UDP 这部分，在工作中遇到的少，没太多体会。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tolerate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;wide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Internet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;conditions&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;transmission&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;perform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;congestion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;over&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;traffic&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bandwidth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;similar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;TCP&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;off&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;retransmission&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;counters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;loss&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;datagrams&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;exceed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;MTU&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;handle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;datagram&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;loss&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;duplication&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;reordering&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;robust&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;delivery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;delays&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;minutes&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;IPv4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;UDP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;checksum&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;IPv6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;checksum&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;may&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;keepalives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;needed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;minimum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;seconds&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;TLS 优化&lt;/h2&gt;
&lt;p&gt;关于TLS 优化还可以看《HTTPS 权威指南》的9.2：TLS协议优化。&lt;br&gt;
另外淘宝的这份分析非常不错：&lt;a href="http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf"&gt;《淘宝HTTPS探索》&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;SSL卸载&lt;/h3&gt;
&lt;p&gt;在保证兼容性的情况下，升级到新版的openSSL，可以有更好的性能。&lt;br&gt;
HPBN的在这一章的建议是用物理机，纯CPU计算卸载，举了Google和Facebook为例。不过如果是使用的云服务的话，部分云厂商在负载均衡上都提供了SSL卸载的功能，不过感觉对ALPN这些协议的支持不知如何，所以还没试用过。云服务虚机+Nginx 来做卸载还是有少许压力的，高峰期的时候。Intel之类的硬件，甚至F5 这种，感觉成本有点高，不过性能确实非常好，如果有条件的话，可以上这类设备。不过使用了这些设备之后，算法升级、调优的自由度可能就不大了，需要综合考虑。  &lt;/p&gt;
&lt;p&gt;为了降低压力，可以对加密套件的选择进行优化，参考《HTTPS权威指南》一书的测试结果：&lt;br&gt;
&lt;img alt="TLS_Speed" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164304.png"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="TLS_Speed_taobao" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164345.png"&gt;  &lt;/p&gt;
&lt;p&gt;建议：优先选择ECDHE，禁用DHE。&lt;/p&gt;
&lt;h3&gt;尽早握手&lt;/h3&gt;
&lt;p&gt;类似TCP的三次握手，TLS的握手过程也可以通过类似CDN的网络进行优化。在距离用户较近的地方搭建代理服务器，然后和后端保持长连接，这样降低用户到服务整个的握手时间。&lt;/p&gt;
&lt;h3&gt;证书优化&lt;/h3&gt;
&lt;p&gt;《HTTPS权威指南》提到的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用尽可能少的证书&lt;/li&gt;
&lt;li&gt;只包含必须的证书&lt;/li&gt;
&lt;li&gt;提供完整的证书链&lt;/li&gt;
&lt;li&gt;使用椭圆曲线证书链&lt;/li&gt;
&lt;li&gt;小心同一张证书绑定过多域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个常见的错误是在证书链里面包含根证书，毫无意义，还加大了传输开销。&lt;/p&gt;
&lt;h3&gt;优化TLS 记录大小&lt;/h3&gt;
&lt;p&gt;TLS 太小会造成浪费，头信息的比例过大。如果太大，会造成延迟，如果万一丢包，会非常糟糕。参考&lt;a href="http://fangpeishi.com/optimizing-tls-record-size.html"&gt;TLS Record Size 优化笔记&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;禁用服务器的TLS压缩，安全性问题，Nginx的话默认是不支持的；&lt;/li&gt;
&lt;li&gt;确保证书链不会超过拥塞窗口大小；&lt;/li&gt;
&lt;li&gt;启用会话缓存和无状态恢复，参考nginx 的 ssl_session_cache，ssl_session_timeout等。&lt;/li&gt;
&lt;li&gt;配置ssl_stapling&lt;/li&gt;
&lt;li&gt;配置ssl_session_tickets&lt;/li&gt;
&lt;li&gt;开启HSTS，这个开启得非常小心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;无线网络优化&lt;/h2&gt;
&lt;p&gt;这部分内容介绍了很多关于移动网络的基础知识，也是为后面的HTTP优化做铺垫，毕竟现在移动App 非常发达。总的来说，移动设备上一次请求的代价更大，时间上和耗电上，所以减少请求和重用连接非常重要。&lt;/p&gt;
&lt;h2&gt;HTTP 优化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 1.0 升级到HTTP1.1&lt;/li&gt;
&lt;li&gt;减少DNS查询&lt;/li&gt;
&lt;li&gt;减少HTTP请求&lt;/li&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;添加Expires 头部并配置ETag标签&lt;/li&gt;
&lt;li&gt;Gzip 压缩资源&lt;/li&gt;
&lt;li&gt;避免HTTP 重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用持久连接&lt;/h3&gt;
&lt;h3&gt;HTTP管道&lt;/h3&gt;
&lt;p&gt;消除部分等待时间。&lt;/p&gt;
&lt;h3&gt;域名分区&lt;/h3&gt;
&lt;p&gt;这个使用要适量，不让会适得其反。&lt;/p&gt;
&lt;h3&gt;拼接、压缩静态资源&lt;/h3&gt;
&lt;p&gt;直接参考&lt;a href="https://ngxpagespeed.com"&gt;ngxpagespeed.com&lt;/a&gt; 就可以了。&lt;/p&gt;
&lt;h3&gt;升级到HTTP 2.0&lt;/h3&gt;
&lt;p&gt;要注意不要把在HTTP 1.1 上的优化手段用到HTTP 2.0 上，会适得其反。&lt;/p&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;书中还有大量其他内容，一些关于TCP、HTTP的基础介绍，以及移动网络、XMLHttpRequest、WebSocket、WebRTC等内容。&lt;/p&gt;</content><category term="2016"></category><category term="web"></category><category term="http"></category><category term="https"></category></entry><entry><title>记一个退出终端进程不退出的问题</title><link href="https://fangpsh.github.io/posts/2016/2016-05-23.html" rel="alternate"></link><published>2016-05-23T15:25:30+08:00</published><updated>2016-05-23T15:25:30+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2016-05-23:/posts/2016/2016-05-23.html</id><summary type="html">&lt;p&gt;某一天开发同学问了一个问题，他们在线上跑一个job，没用screen，nohup，把iTerm 窗口关了，job 没挂。再登录进去看，PPID 变成1，即进程被init …&lt;/p&gt;</summary><content type="html">&lt;p&gt;某一天开发同学问了一个问题，他们在线上跑一个job，没用screen，nohup，把iTerm 窗口关了，job 没挂。再登录进去看，PPID 变成1，即进程被init 进程接管。&lt;br&gt;
在对应机器上执行&lt;code&gt;shopt&lt;/code&gt;, 发现：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...
gnu_errfmt      off
histappend      off
histreedit      off
histverify      off
hostcomplete    on
huponexit       off
interactive_comments    on
lastpipe        off
lithist         off
login_shell     on
mailwarn        off
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意CentOS 7 默认将&lt;code&gt;huponexit&lt;/code&gt; 设为&lt;code&gt;off&lt;/code&gt; 了，这样在用户将Shell 退出结束会话时，系统不会发送 SIGHUP 给所有进程，这效果其实类似使用了nohup，nohup 的作用就是忽略HUP 信号。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;huponexit&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;SIGHUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jobs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;exits&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="2016"></category><category term="shell"></category><category term="linux"></category></entry><entry><title>Google Shell 编程风格指南</title><link href="https://fangpsh.github.io/posts/2016/2016-04-13.html" rel="alternate"></link><published>2016-04-13T00:00:00+08:00</published><updated>2016-04-13T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2016-04-13:/posts/2016/2016-04-13.html</id><summary type="html">&lt;p&gt;google shell编程风格指南翻译&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;原文：&lt;a href="https://google.github.io/styleguide/shell.xml"&gt;https://google.github.io/styleguide/shell.xml&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;修订版：1.26&lt;/li&gt;
&lt;li&gt;作者：Paul Armstrong 等&lt;/li&gt;
&lt;li&gt;注：代码片段内的注释未翻译，怕影响美观。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;h3&gt;使用哪种Shell&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Bash&lt;/code&gt; 是唯一被允许用于编写可执行文件的Shell 脚本语言（译注：存在多种Shell语言，可参考&lt;a href="https://en.wikipedia.org/wiki/Unix_shell）"&gt;Wikipedia:Unix_Shell&lt;/a&gt;。&lt;/strong&gt;&lt;br&gt;
可执行文件必须以&lt;code&gt;#!/bin/bash&lt;/code&gt; 开始（译注：&lt;a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"&gt;Wikipedia:Shebang&lt;/a&gt;），并且使用最小数量的执行选项(译注：&lt;a href="https://www.chainsawonatireswing.com/2012/02/02/find-out-what-your-unix-shells-flags-are-then-change-them//?from=@"&gt;Find out what your UNIX shell’s flags are &amp;amp; then change them&lt;/a&gt;, &lt;a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html"&gt;The Set Builtin&lt;/a&gt;）。&lt;br&gt;
使用&lt;code&gt;set&lt;/code&gt;设置shell 执行选项，以便用&lt;code&gt;bash &amp;lt;脚本名&amp;gt;&lt;/code&gt; 的方式调用脚本时候不会破坏执行选项的功能。&lt;br&gt;
限制所有的可执行shell 脚本统一使用bash 使得我们在机器上能统一安装一种shell 。 
唯一的例外，你正在编写的项目强制你使用其他shell 语言。例如Solaris SVR4 软件包要求包内的任何脚本用纯Bourne shell 编写（译注：即sh，参考&lt;a href="https://en.wikipedia.org/wiki/Bourne_shell"&gt;Wikipedia:Bourne_shell&lt;/a&gt;）。  &lt;/p&gt;
&lt;h3&gt;什么时候使用Shell&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Shell 应该只用于编写小工具或者简单的包装脚本（译注：wrapper scripts，&lt;a href="http://tldp.org/LDP/abs/html/wrapper.html"&gt;Shell Wrappers&lt;/a&gt;）。&lt;/strong&gt;&lt;br&gt;
尽管shell 脚本不是一种开发语言，但在Google 内部它被用于编写各种各样的工具性脚本。在广泛的开发部署中，遵循这份编程风格指南是一种共识，而不是一个建议。  &lt;/p&gt;
&lt;p&gt;一些准则： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你主要是调用其他工具和做相对少量的数据处理，使用shell 来完成任务是合适的选择。&lt;/li&gt;
&lt;li&gt;如果你在意性能，请使用其他工具来代替shell。&lt;/li&gt;
&lt;li&gt;任何情况下，如果你发现需要使用数组（译注：&lt;a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_10_02.html"&gt;Bash:Array variables&lt;/a&gt;），并且不是使用&lt;code&gt;${PIPESTATUS}&lt;/code&gt;（译注：PIPESTATUS 保存着管道中各命令的返回值），你应该使用Python。&lt;/li&gt;
&lt;li&gt;如果你要编写一份超过一百行的Shell 脚本，你应该尽量使用Python 来编写。记住，随着Shell脚本行数的增长，尽早使用其他语言来重写你的脚本，以免将来重写的时候浪费更多的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h2&gt;Shell文件和解释器调用&lt;/h2&gt;
&lt;h3&gt;文件扩展名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;可执行文件应该不带扩展名（强烈建议）或者使用&lt;code&gt;.sh&lt;/code&gt; 的扩展名。 库文件应该带一个&lt;code&gt;.sh&lt;/code&gt;的扩展名，并且不应该是可执行的。&lt;/strong&gt;&lt;br&gt;
当我们执行一个程序的时候不需要知道它是用什么语言写的，并且shell 也不要求脚本必须带扩展名。所以我们不希望一个可执行文件带着扩展名。&lt;br&gt;
然而，对于库文件来说知道是什么语言写的却非常重要，有时需要使用不同的语言编写类似的库文件。使用代表语言的文件名后缀（即扩展名），就可以让使用不同语言编写的具有同样功能的库件有着相同的名字。  &lt;/p&gt;
&lt;h3&gt;SUID/SGID&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;禁止在Shell 脚本中使用SUID 或SGID （译注：&lt;a href="http://thegeekdiary.com/what-is-suid-sgid-and-sticky-bit/"&gt;What is SUID, SGID and Sticky bit ?&lt;/a&gt;）&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;shell 存在太多的安全问题，以至于允许SUID/SGID 后几乎不可能保证shell 的安全。虽然bash 让运行 SUID 变得困难，但是在某些平台上还是有可能，所以我们明确禁止使用它。&lt;br&gt;
当你需要提权的时候，使用&lt;code&gt;sudo&lt;/code&gt;（译注：&lt;a href="https://en.wikipedia.org/wiki/Sudo"&gt;Wikipedia:sudo&lt;/a&gt;）。  &lt;/p&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;h3&gt;STDOUT vs STDERR&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;所有的错误信息应该传入STDERR（译注：标准错误输出，延伸阅读：&lt;a href="http://www.tldp.org/LDP/abs/html/io-redirection.html"&gt;I/O Redirection&lt;/a&gt;）&lt;/strong&gt;
这使得从实际问题中区分正常状态变得容易。&lt;br&gt;
推荐使用一个函数来专门打印错误信息和其他状态信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[$(date +&amp;#39;%Y-%m-%dT%H:%M:%S%z&amp;#39;)]: $@&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to do_something&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${E_DID_NOTHING}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;注释&lt;/h2&gt;
&lt;h3&gt;文件头&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;每个文件的开头必须有一段关于它内容的概述&lt;/strong&gt;&lt;br&gt;
每个文件必须在开头部分包含一段关于其内容的概述的注释。也可以选择添加版权声明和作者信息。&lt;br&gt;
例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Perform hot backups of Oracle databases.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;函数注释&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;除了简短、明确的函数之外，任何一个函数都必须写注释。库文件的中的任何一个函数必须写注释，无论其长短和复杂性。&lt;/strong&gt;&lt;br&gt;
他人应该能够在不阅读源码的情况下通过阅读注释（和帮助信息，如果有提供的话），从而学会使用你的程序或者库文件中的函数。&lt;br&gt;
所有函数的注释都应该包含：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对函数的描述；&lt;/li&gt;
&lt;li&gt;会使用或修改的全局变量；&lt;/li&gt;
&lt;li&gt;函数传参；&lt;/li&gt;
&lt;li&gt;返回值，不是运行的最后一条命令默认的退出状态码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Perform hot backups of Oracle databases.&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;#######################################&lt;/span&gt;
&lt;span class="c1"&gt;# Cleanup files from the backup dir&lt;/span&gt;
&lt;span class="c1"&gt;# Globals:&lt;/span&gt;
&lt;span class="c1"&gt;#   BACKUP_DIR&lt;/span&gt;
&lt;span class="c1"&gt;#   ORACLE_SID&lt;/span&gt;
&lt;span class="c1"&gt;# Arguments:&lt;/span&gt;
&lt;span class="c1"&gt;#   None&lt;/span&gt;
&lt;span class="c1"&gt;# Returns:&lt;/span&gt;
&lt;span class="c1"&gt;#   None&lt;/span&gt;
&lt;span class="c1"&gt;#######################################&lt;/span&gt;
cleanup&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
...
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;实现的注释&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;代码中使用了技巧，或晦涩难懂，或有趣，或十分重要的部分你都应该添加注释。&lt;/strong&gt;&lt;br&gt;
这里要遵循Google 代码注释的通用惯例。不要任何东西都添加注释。如果是一个复杂的算法，或者你在做一些与众不同的事情，加一段简短的注释。  &lt;/p&gt;
&lt;h3&gt;TODO 注释&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;对临时性的代码，或短期的解决方案，或足够好但是不够完美的代码等添加TODO 注释。&lt;/strong&gt;&lt;br&gt;
这和&lt;a href="https://google.github.io/styleguide/cppguide.html#TODO_Comments"&gt;C++ Guide&lt;/a&gt; 中的做法约定一致。&lt;br&gt;
TODO 注释都应该在开头包含大写的TODO，跟着是一对小括号，中间注明你的用户名。冒号是可选的。最好也在TODO 条目末尾添加bug/ticket 号码。&lt;br&gt;
例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# TODO(mrmonkey): Handle the unlikely edge cases (bug ####)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;格式&lt;/h2&gt;
&lt;p&gt;修改代码的时候应该遵循现存代码风格，任何新代码都应该遵循下列规范。&lt;/p&gt;
&lt;h3&gt;缩进&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用两个空格做缩进，不要使用tabs。&lt;/strong&gt;&lt;br&gt;
在代码块之间使用空行提提高可读性。缩进是两个空格。无论如何都不要使用tabs。对于已经存在的文件，如实的保留已经存在的缩进。  &lt;/p&gt;
&lt;h3&gt;行宽和长字符串&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;行宽最大为80 个字符。&lt;/strong&gt;&lt;br&gt;
如果不得不写超过80 个字符的字符串，你应该尽可能的使用here 文档（译注：&lt;a href="https://zh.wikipedia.org/wiki/Here文档"&gt;Wikipedia:Here文档&lt;/a&gt;）或者嵌入新行。如果有超过80 个字符的字符串并且不能被分割，这是可以的，但是强烈建议找到一个合适的方法让它变短。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="kr"&gt;DO&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;here document&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exceptionally&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="kr"&gt;END&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Embedded&lt;/span&gt; &lt;span class="n"&gt;newlines&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt;
&lt;span class="n"&gt;long_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exceptionally&lt;/span&gt;
  &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;管道&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果一行写不下整条管道，那么应该一行一个管段的进行分割。&lt;/strong&gt;&lt;br&gt;
如果一行能写下一条管道，那么就应该写到一行。 &lt;br&gt;
如果写不下，就应该将管道分割为一个管段一行，以2个空格作为缩进。这个规范适用与使用“|” 链接起来的组合命令以及使用“||” 和“&amp;amp;&amp;amp;”的组合逻辑语句。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# All fits on one line
command1 | command2

# Long commands
command1 \
  | command2 \
  | command3 \
  | command4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;循环&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;; do&lt;/code&gt;, &lt;code&gt;; then&lt;/code&gt; 与 &lt;code&gt;while&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt; 或&lt;code&gt;if&lt;/code&gt; 应置于同一行。&lt;/strong&gt;&lt;br&gt;
Shell 中的循环有一点特别,但是我们遵循和声明函数时大括号的相同的准则。即&lt;code&gt;; then&lt;/code&gt; 和 &lt;code&gt;; do&lt;/code&gt; 应该和 if/for/while 语句写在同一行。&lt;code&gt;else&lt;/code&gt; 应该独占一行，结束声明也应该独占一行，并且和开始声明垂直对齐。  &lt;/p&gt;
&lt;p&gt;例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;for&lt;span class="w"&gt; &lt;/span&gt;dir&lt;span class="w"&gt; &lt;/span&gt;in&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;dirs_to_cleanup&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;;&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ORACLE_SID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;    &lt;/span&gt;log_date&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Cleaning&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;old&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;in&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ORACLE_SID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ORACLE_SID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&amp;quot;*
&lt;span class="w"&gt;    &lt;/span&gt;if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;$?&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;      &lt;/span&gt;error_message
&lt;span class="w"&gt;    &lt;/span&gt;fi
&lt;span class="w"&gt;  &lt;/span&gt;else
&lt;span class="w"&gt;    &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ORACLE_SID&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;span class="w"&gt;    &lt;/span&gt;if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;$?&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;      &lt;/span&gt;error_message
&lt;span class="w"&gt;    &lt;/span&gt;fi
&lt;span class="w"&gt;  &lt;/span&gt;fi
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Case 声明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以选择2个空格作为缩进。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;匹配行右括号后面和&lt;code&gt;;;&lt;/code&gt;前面都需要加一个空格。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;匹配模式，操作和&lt;code&gt;;;&lt;/code&gt; 应该分成不同的行。长的语句或者多命令组合语句应该切割成多行。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;匹配表达式应该比&lt;code&gt;case&lt;/code&gt;和&lt;code&gt;esac&lt;/code&gt; 缩进一级。多行操作应该再缩进一级。一般情况下，不需要给匹配表达式加引号。匹配模式前面不应该有左括号。避免使用&lt;code&gt;;&amp;amp;&lt;/code&gt; 和&lt;code&gt;;;&amp;amp;&lt;/code&gt;这些标记。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${expression}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;some_command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${variable}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${other_expr}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;relative&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;another_command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${actions}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${other_expr}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unexpected expression &amp;#39;${expression}&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="n"&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;变量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;按优先级排序：和已存的风格一致；给你的变量加引号；推荐使用"${var}"而不是"$var"，但是视具体而定。&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;这些仅仅是指南，因为这个主题内容作为强制规定似乎是有争议的。&lt;br&gt;
以下按照优先级排列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和现存代码的风格保持一致。&lt;/li&gt;
&lt;li&gt;给变量加引号，参考「加引号」一节。&lt;/li&gt;
&lt;li&gt;如果不是绝对必要或为了避免歧义，不要用大括号把单个字符的shell 变量或 特殊参数（译注：指$?,$$,$@,$*等这类参数，&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html"&gt;Special Parameters&lt;/a&gt;）或位置参数（译注：&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html"&gt; Positional Parameters&lt;/a&gt;）。推荐将其他所有变量都用大括号括起来。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Section of recommended cases.&lt;/span&gt;

&lt;span class="c1"&gt;# Preferred style for &amp;#39;special&amp;#39; variables:&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Positional: $1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$5&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Specials: !=$!, -=$-, _=$_. ?=$?, #=$# *=$* @=$@ \$=$$ ...&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Braces necessary:&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;many parameters: ${10}&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Braces avoiding confusion:&lt;/span&gt;
&lt;span class="c1"&gt;# Output is &amp;quot;a0b0c0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${1}0${2}0${3}0&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Preferred style for other variables:&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PATH=${PATH}, PWD=${PWD}, mine=${some_var}&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file=${f}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Section of discouraged cases&lt;/span&gt;

&lt;span class="c1"&gt;# Unquoted vars, unbraced vars, brace-quoted single letter&lt;/span&gt;
&lt;span class="c1"&gt;# shell specials.&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="n"&gt;avar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b=$bvar&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PID=${$}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${1}&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Confusing use: this is expanded as &amp;quot;${1}0${2}0${3}0&amp;quot;,&lt;/span&gt;
&lt;span class="c1"&gt;# not &amp;quot;${10}${20}${30}&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$10$20$30&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;加引号&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;包含变量的字符串，命令替换，空格和shell 元字符都必须加引号，除了一定要仔细得处理表达式，不加引号。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐给包含单词的字符串加引号（不包括命令选项或路径名）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要给字面上的整数加引号。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仔细处理&lt;code&gt;[[&lt;/code&gt;中匹配模式的引号。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;坚持使用"$@"，除非你有原因要使用 $* 。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# &amp;#39;Single&amp;#39; quotes indicate that no substitution is desired.&lt;/span&gt;
&lt;span class="cp"&gt;# &amp;quot;Double&amp;quot; quotes indicate that substitution is required/tolerated.&lt;/span&gt;

&lt;span class="cp"&gt;# Simple examples&lt;/span&gt;
&lt;span class="cp"&gt;# &amp;quot;quote command substitutions&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(some_command and its args &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot; &amp;#39;quoted separately&amp;#39;)&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# &amp;quot;quote variables&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${flag}&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# &amp;quot;never quote literal integers&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="cp"&gt;# &amp;quot;quote command substitutions&amp;quot;, even when you expect integers&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(generate_number)&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# &amp;quot;prefer quoting words&amp;quot;, not compulsory&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USE_INTEGER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;# &amp;quot;quote shell meta characters&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stranger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;well&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;met&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Earn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lots&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$$&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Process $$: Done making \$\$\$.&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# &amp;quot;command options or path names&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;# ($1 is assumed to contain a value here)&lt;/span&gt;
&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hugo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# Less simple examples&lt;/span&gt;
&lt;span class="cp"&gt;# &amp;quot;quote variables, unless proven false&amp;quot;: ccs might be empty&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${reviewers}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ccs&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--cc&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${ccs}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# Positional parameter precautions: $1 might be unset&lt;/span&gt;
&lt;span class="cp"&gt;# Single quotes leave regex as-is.&lt;/span&gt;
&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Ss&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;pecial&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|?&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# For passing on arguments,&lt;/span&gt;
&lt;span class="cp"&gt;# &amp;quot;$@&amp;quot; is right almost everytime, and&lt;/span&gt;
&lt;span class="cp"&gt;# $* is wrong almost everytime:&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;
&lt;span class="cp"&gt;# * $* and $@ will split on spaces, clobbering up arguments&lt;/span&gt;
&lt;span class="cp"&gt;#   that contain spaces and dropping empty strings;&lt;/span&gt;
&lt;span class="cp"&gt;# * &amp;quot;$@&amp;quot; will retain arguments as-is, so no args&lt;/span&gt;
&lt;span class="cp"&gt;#   provided will result in no args being passed on;&lt;/span&gt;
&lt;span class="cp"&gt;#   This is in most cases what you want to use for passing&lt;/span&gt;
&lt;span class="cp"&gt;#   on arguments.&lt;/span&gt;
&lt;span class="cp"&gt;# * &amp;quot;$*&amp;quot; expands to one argument, with all args joined&lt;/span&gt;
&lt;span class="cp"&gt;#   by (usually) spaces,&lt;/span&gt;
&lt;span class="cp"&gt;#   so no args provided will result in one empty string&lt;/span&gt;
&lt;span class="cp"&gt;#   being passed on.&lt;/span&gt;
&lt;span class="cp"&gt;# (Consult &amp;#39;man bash&amp;#39; for the nit-grits ;-)&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2 two&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3 three tres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$#, $@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2 two&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3 three tres&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$#, $@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;特性和坑&lt;/h2&gt;
&lt;h3&gt;命令替换&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;$(command)&lt;/code&gt; 代替反引号。&lt;/strong&gt;&lt;br&gt;
嵌套的反引号需要在内部使用&lt;code&gt;\&lt;/code&gt; 转义。嵌套的&lt;code&gt;$(command)&lt;/code&gt; 不需要改变格式，可读性也更好。&lt;br&gt;
例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is preferred:&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(command &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# This is not:&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`command \`command1\``&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Test, [ 和 [[&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;推荐使用&lt;code&gt;[[ ... ]]&lt;/code&gt;代替 &lt;code&gt;[&lt;/code&gt;,&lt;code&gt;test&lt;/code&gt; 和&lt;code&gt;/usr/bin/[&lt;/code&gt;&lt;/strong&gt;  &lt;br&gt;
&lt;code&gt;[[ ... ]]&lt;/code&gt; 可以降低错误，因为在 &lt;code&gt;[[&lt;/code&gt; 和&lt;code&gt;]]&lt;/code&gt;  直接不会发生路径扩展或单词分割，并且&lt;code&gt;[[ ... ]]&lt;/code&gt; 允许正则表达式而&lt;code&gt;[ ... ]&lt;/code&gt;不允许。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ensures&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;made&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;characters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;alnum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;followed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Note&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;RHS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;quoted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;here&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;gory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;see&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;E14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;tiswww&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;case&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;edu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;php&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;chet&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;bash&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FAQ&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alnum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Match&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;matches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;exact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pattern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;f*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Does&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;f*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Match&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;gives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;too many arguments&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;expanded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;directory&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Match&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;检测字符串&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如果可能的话，使用引号而不是过滤字符串。&lt;/strong&gt;&lt;br&gt;
检测字符串时候，Bash能够智能的处理空字符串。所以，为了让代码可读性更好，应用空或非空字符串测试，而不是过滤字符串。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Do this:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${my_var}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some_string&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# -z (string length is zero) and -n (string length is not zero) are&lt;/span&gt;
&lt;span class="c1"&gt;# preferred over testing for an empty string&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${my_var}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# This is OK (ensure quotes on the empty side), but not preferred:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${my_var}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Not this:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${my_var}X&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;some_stringX&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为避免对你检测的目的感到困惑，请直接使用&lt;code&gt;-z&lt;/code&gt;或&lt;code&gt;-n&lt;/code&gt;。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Use this&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${my_var}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Instead of this as errors can occur if ${my_var} expands to a test&lt;/span&gt;
&lt;span class="c1"&gt;# flag&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${my_var}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;文件名的通配符扩展&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当对文件名使用通配符的时候，请使用准确的路径。&lt;/strong&gt;&lt;br&gt;
因为文件名可以以&lt;code&gt;-&lt;/code&gt;为开头，所以使用&lt;code&gt;./*&lt;/code&gt; 代替&lt;code&gt;*&lt;/code&gt;会更安全。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Here&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s the contents of the directory:&lt;/span&gt;
&lt;span class="s1"&gt;# -f  -r  somedir  somefile&lt;/span&gt;

&lt;span class="s1"&gt;# This deletes almost everything in the directory by force&lt;/span&gt;
&lt;span class="s1"&gt;psa@bilby$ rm -v *&lt;/span&gt;
&lt;span class="s1"&gt;removed directory: `somedir&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;somefile&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;# As opposed to:&lt;/span&gt;
&lt;span class="s1"&gt;psa@bilby$ rm -v ./*&lt;/span&gt;
&lt;span class="s1"&gt;removed `./-f&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;rm: cannot remove `./somedir&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;
&lt;span class="n"&gt;removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;somefile&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Eval&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;应该避免使用&lt;code&gt;eval&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
当用于给变量赋值时，eval 可以解析输入，设置变量，但是不能检查这些变量是什么。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# What does this set?&lt;/span&gt;
&lt;span class="c1"&gt;# Did it succeed? In part or whole?&lt;/span&gt;
&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_my_variables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# What happens if one of the returned values has a space in it?&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(eval some_function)&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;管道导入While&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;相比管道导入while，更推荐使用程序替换（译注：&lt;a href="http://tldp.org/LDP/abs/html/process-sub.html"&gt;Process Substitution&lt;/a&gt;）或 for 循环。在 一个while 循环中修改的变量是不能传递给父进程的，因为循环命令是允许在一个子shell 中。&lt;/strong&gt;&lt;br&gt;
管道导入while 循环中隐藏的子shell 让追踪bug 变得困难。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;last_line=&amp;#39;NULL&amp;#39;
your_command&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;while&lt;span class="w"&gt; &lt;/span&gt;read&lt;span class="w"&gt; &lt;/span&gt;line;&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;last_line=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
done

#&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;NULL&amp;#39;
echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;last_line&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果你确定输入不包含空格或者特殊字符串（通常，这意味着不是用户输入的内容），请使用 for 循环。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;total=0
#&lt;span class="w"&gt; &lt;/span&gt;Only&lt;span class="w"&gt; &lt;/span&gt;do&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;if&lt;span class="w"&gt; &lt;/span&gt;there&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;spaces&lt;span class="w"&gt; &lt;/span&gt;in&lt;span class="w"&gt; &lt;/span&gt;return&lt;span class="w"&gt; &lt;/span&gt;values.
for&lt;span class="w"&gt; &lt;/span&gt;value&lt;span class="w"&gt; &lt;/span&gt;in&lt;span class="w"&gt; &lt;/span&gt;$(command);&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;total+=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用进程替换可以重定向输出，但是请将命令放置在一个显式的子shell 中，而不是为while 循环创建的隐式子shell。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;total=0
last_file=
while&lt;span class="w"&gt; &lt;/span&gt;read&lt;span class="w"&gt; &lt;/span&gt;count&lt;span class="w"&gt; &lt;/span&gt;filename;&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;total+=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;span class="w"&gt;  &lt;/span&gt;last_file=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
done&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;(your_command&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;uniq&lt;span class="w"&gt; &lt;/span&gt;-c)

#&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;second&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;from
#&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;command.
echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Total&lt;span class="w"&gt; &lt;/span&gt;=&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Last&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;=&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;last_file&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当不需要传递非常的结果给父shell 的时候可以使用while 循环，通常情况下更多的结果需要复杂的“解析”。另外注意一些简单的例子通过类似aws 这样的工具解决起来更容易。这个特性在你特别不希望改变父进程域的变量的时候也是有用的。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="w"&gt; &lt;/span&gt;Trivial&lt;span class="w"&gt; &lt;/span&gt;implementation&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;expression:
#&lt;span class="w"&gt;   &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;$3&lt;span class="w"&gt; &lt;/span&gt;==&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;nfs&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;{&lt;span class="w"&gt; &lt;/span&gt;print&lt;span class="w"&gt; &lt;/span&gt;$2&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;maps&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;$1&lt;span class="w"&gt; &lt;/span&gt;}&amp;#39;&lt;span class="w"&gt; &lt;/span&gt;/proc/mounts
cat&lt;span class="w"&gt; &lt;/span&gt;/proc/mounts&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;while&lt;span class="w"&gt; &lt;/span&gt;read&lt;span class="w"&gt; &lt;/span&gt;src&lt;span class="w"&gt; &lt;/span&gt;dest&lt;span class="w"&gt; &lt;/span&gt;type&lt;span class="w"&gt; &lt;/span&gt;opts&lt;span class="w"&gt; &lt;/span&gt;rest;&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;==&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;nfs&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;    &lt;/span&gt;echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;NFS&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;maps&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
&lt;span class="w"&gt;  &lt;/span&gt;fi
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;命名习惯&lt;/h2&gt;
&lt;h3&gt;函数名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用小写字母，用下划线分隔单词。使用&lt;code&gt;::&lt;/code&gt;分隔库文件。函数名后面必须有小括号。关键词&lt;code&gt;function&lt;/code&gt; 是可选的，但在项目中应该保持一致。&lt;/strong&gt;&lt;br&gt;
如果你在写一个简单的函数，请用小写字母和下划线分隔单词。如果你在写一个包，包名请用&lt;code&gt;::&lt;/code&gt; 分隔。左大括号必须和函数名在同一行（和Google 内的其他语言规范一样），并且在函数名和小括号直接不能有空格。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Single function
my_func() {
  ...
}

# Part of a package
mypackage::my_func() {
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当函数名后面带"()" 的时候，关键词&lt;code&gt;function&lt;/code&gt; 是多余的，但是它提高了函数的辨识度。  &lt;/p&gt;
&lt;h3&gt;变量名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;和函数名规范一致。&lt;/strong&gt;&lt;br&gt;
循环内的变量名应该和其他变量名一样命名。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;for&lt;span class="w"&gt; &lt;/span&gt;zone&lt;span class="w"&gt; &lt;/span&gt;in&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;zones&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;;&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;something_with&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;常量名和环境变量名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;全部都应该大写，用下划线分隔，在文件顶部声明。&lt;/strong&gt;&lt;br&gt;
常量和任何导出到环境的元素都应该大写。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Constant&lt;/span&gt;
&lt;span class="n"&gt;readonly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PATH_TO_FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/some/path&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Both constant and environment&lt;/span&gt;
&lt;span class="n"&gt;declare&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ORACLE_SID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PROD&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;有些元素在初始设置时就成了常量（例如通过getopts，（译注：&lt;a href="http://wiki.bash-hackers.org/howto/getopts_tutorial"&gt;Small getopts tutorial&lt;/a&gt;））。所以可以在getops 中或在某种情况中设置变量，但是应该在设置之后马上将其设置成只读。注意在函数内部&lt;code&gt;declare&lt;/code&gt; 不会对全局变量进行操作，所以推荐使用&lt;code&gt;readonly&lt;/code&gt;或&lt;code&gt;export&lt;/code&gt;来代替。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VERBOSE=&amp;#39;false&amp;#39;
while&lt;span class="w"&gt; &lt;/span&gt;getopts&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;v&amp;#39;&lt;span class="w"&gt; &lt;/span&gt;flag;&lt;span class="w"&gt; &lt;/span&gt;do
&lt;span class="w"&gt;  &lt;/span&gt;case&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;in
&lt;span class="w"&gt;    &lt;/span&gt;v)&lt;span class="w"&gt; &lt;/span&gt;VERBOSE=&amp;#39;true&amp;#39;&lt;span class="w"&gt; &lt;/span&gt;;;
&lt;span class="w"&gt;  &lt;/span&gt;esac
done
readonly&lt;span class="w"&gt; &lt;/span&gt;VERBOSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;源文件名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;全小写，如果有必要的话应该用下划线分隔单词。&lt;/strong&gt;&lt;br&gt;
这和Google 内部的其他代码风格一致：&lt;code&gt;maketemplate&lt;/code&gt;或&lt;code&gt;make_template&lt;/code&gt;是可以的，但不可以是&lt;code&gt;make-template&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;只读变量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;readonly&lt;/code&gt;或&lt;code&gt;declare -r&lt;/code&gt;来确保它们是只读的。&lt;/strong&gt;&lt;br&gt;
因为全局变量在shell 中被广泛使用，所以在使用它们的时候捕获错误是非常重要的。当你声明变量的时如果打算让它们只读，那就明确的设置一下。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;zip_version=&amp;quot;$(dpkg&lt;span class="w"&gt; &lt;/span&gt;--status&lt;span class="w"&gt; &lt;/span&gt;zip&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;Version:&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;2)&amp;quot;
if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;zip_version&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;  &lt;/span&gt;error_message
else
&lt;span class="w"&gt;  &lt;/span&gt;readonly&lt;span class="w"&gt; &lt;/span&gt;zip_version
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;使用局部变量&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;local&lt;/code&gt;声明函数内的变量。声明和赋值应该在不同行。&lt;/strong&gt;&lt;br&gt;
通过使用&lt;code&gt;local&lt;/code&gt; 声明局部变量来确保它们只作用于函数和子函数内部。这样做避免污染全局命名空间，和避免不经意之间设置了一个对于函数外部十分重要的变量。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Separate lines for declaration and assignment:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_var&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;my_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(my_func)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# DO NOT do this: $? contains the exit code of &amp;#39;local&amp;#39;, not my_func&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(my_func)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;函数位置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;将所有函数一起放在常量下方。不要在函数之间挟藏可执行代码。&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;如果存在函数，请将它们一起放在文件的开头。只有includes，&lt;code&gt;set&lt;/code&gt; 声明和常量设置有可能出现在函数上面。&lt;br&gt;
不要在函数之间挟藏可执行代码。如果这样做会导致在debug 的时候，代码难以跟踪和出现意想不到的执行结果。&lt;/p&gt;
&lt;h3&gt;main&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;至少包含一个函数的脚本，如果足够长的话，都应该有一个叫&lt;code&gt;main&lt;/code&gt; 的函数。&lt;/strong&gt;&lt;br&gt;
为了方便找到程序开始执行的地方，应该在所有函数的底部放一个叫&lt;code&gt;main&lt;/code&gt;的主函数，包含主要的程序调用。这使得其他的代码保持一致性，也允许你使用&lt;code&gt;local&lt;/code&gt;定义更多的变量（如果主代码不是一个函数是做不到的）。文件最后一行非注释的内容应该是调用&lt;code&gt;main&lt;/code&gt;：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当然，对于顺序执行的简短代码，加'main' 函数是适得其反的，并不需要。&lt;/p&gt;
&lt;h2&gt;调用命令&lt;/h2&gt;
&lt;h3&gt;检查返回值&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;总是检查返回值，并给出具体解释信息。&lt;/strong&gt;&lt;br&gt;
对于非管道的命令，可以简单的使用&lt;code&gt;$?&lt;/code&gt; 或使用&lt;code&gt;if&lt;/code&gt; 语句直接检查返回值。&lt;br&gt;
例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_list&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;;&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;  &lt;/span&gt;echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Unable&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_list&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
&lt;span class="w"&gt;  &lt;/span&gt;exit&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;E_BAD_MOVE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
fi

#&lt;span class="w"&gt; &lt;/span&gt;Or
mv&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_list&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&amp;quot;
if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;$?&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;  &lt;/span&gt;echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Unable&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;file_list&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;dest_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
&lt;span class="w"&gt;  &lt;/span&gt;exit&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;E_BAD_MOVE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bash 也有一个&lt;code&gt;PIPESTATUS&lt;/code&gt; 的变量，可以通过它检查管道中各部分的返回值。如果你仅仅需要检查整条管道的执行成功或失败，可以参考下列做法：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-cf&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;./*&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;(&lt;span class="w"&gt; &lt;/span&gt;cd&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-xf&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;)
if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PIPESTATUS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;||&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PIPESTATUS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;  &lt;/span&gt;echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;Unable&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;2
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然而，当你执行其他命令后&lt;code&gt;PIPESTATUS&lt;/code&gt;就会被覆盖，如果你需要根据管道中不同部分发生的错误执行不同的动作，你需要在执行完命令之后立即将&lt;code&gt;PIPESTATUS&lt;/code&gt; 赋值给一个变量（不要忘记 &lt;code&gt;[&lt;/code&gt; 也是一个命令，抹除&lt;code&gt;PIPESTATUS&lt;/code&gt;的内容）。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-cf&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;./*&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;(&lt;span class="w"&gt; &lt;/span&gt;cd&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-xf&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;)
return_codes=(&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PIPESTATUS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;)
if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;return_codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;  &lt;/span&gt;do_something
fi
if&lt;span class="w"&gt; &lt;/span&gt;[[&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;return_codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;-ne&lt;span class="w"&gt; &lt;/span&gt;0&lt;span class="w"&gt; &lt;/span&gt;]];&lt;span class="w"&gt; &lt;/span&gt;then
&lt;span class="w"&gt;  &lt;/span&gt;do_something_else
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;内建命令 vs 外部命令&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在选择调用内建命令还是外部程序时，选择内建命令。&lt;/strong&gt;&lt;br&gt;
我们推荐使用&lt;a href="http://linux.die.net/man/1/bash"&gt;bash(1)&lt;/a&gt;中「Parameter Expansion」部分提到的内建命令，因为内建命令更加可靠和可移植（特别是和sed 之类的命令相比）。&lt;br&gt;
例：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="w"&gt; &lt;/span&gt;Prefer&lt;span class="w"&gt; &lt;/span&gt;this:
addition=$((&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;))
substitution=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="c1"&gt;#foo/bar&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;

#&lt;span class="w"&gt; &lt;/span&gt;Instead&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;this:
addition=&amp;quot;$(expr&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;)&amp;quot;
substitution=&amp;quot;$(echo&lt;span class="w"&gt; &lt;/span&gt;&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;&lt;span class="w"&gt; &lt;/span&gt;|&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&amp;#39;s/^foo/bar/&amp;#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;始终遵循常识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请花几分钟阅读&lt;a href="https://google.github.io/styleguide/cppguide.html"&gt;C++ Guide&lt;/a&gt; 底部的Parting Words 部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;临别赠言&lt;/p&gt;
&lt;p&gt;始终遵循常识。&lt;/p&gt;
&lt;p&gt;当你编码时，花几分钟阅读一下其他代码，并熟悉它的风格。如果他们在if 条件从句中使用空格，那么你也应该这样做。如果他们的注释由星号组成的盒子围着，那么你也应该这样做。  &lt;/p&gt;
&lt;p&gt;编程风格指南是为了提供一个通用的编程规范，以便人们可以集中精力在编码实现上，而不是考虑代码形式上。我们展示了整体上的风格规范，另外局部的风格也同样重要。如果你在一个文件
中添加的代码的风格和原来的风格差异巨大，当阅读这份代码时，整体的韵味就被破坏了。请尽量避免这样做。&lt;/p&gt;
&lt;p&gt;好了，关于编程风格指南写的够多了，代码本身更加有趣。尽情享受吧！&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="2016"></category><category term="Shell"></category></entry><entry><title>cronic脚本修正</title><link href="https://fangpsh.github.io/posts/2015/2015-07-13.html" rel="alternate"></link><published>2015-07-13T00:00:00+08:00</published><updated>2015-07-13T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2015-07-13:/posts/2015/2015-07-13.html</id><summary type="html">&lt;p&gt;实习期间做的一个东西需要读写控制crontab 的任务，失败需要报警。crontab本身有报警，但是非常不友好，例如cron job如果有任何输出（标准输出或者标准错误输出 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;实习期间做的一个东西需要读写控制crontab 的任务，失败需要报警。crontab本身有报警，但是非常不友好，例如cron job如果有任何输出（标准输出或者标准错误输出），都会发送邮件通知，并且还需要在每台机器上配置smtp，非常麻烦。所以想着就在前面直接套了个脚本，如果任务异常，用curl调一下远程服务的api发送邮件即可。&lt;/p&gt;
&lt;p&gt;找到这样一份shell脚本-- &lt;a href="http://habilis.net/cronic/"&gt;Cronic&lt;/a&gt;，不过这份脚本不满足一些需求，并在部署测试的时候遇到一些bug，修正如下。&lt;/p&gt;
&lt;p&gt;上文脚本链接中的例子是：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cronic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;backup&lt;/code&gt;指的是&lt;strong&gt;一条&lt;/strong&gt;命令，不能使用组合的命令，不然会出现意想不到的事情。例如：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;30&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;23&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cronic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;named&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zone_bak&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maxdepth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xargs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果用root 用户执行这个任务，将直接导致 /root下两天前的所有文件被删。。至于为什么，看原来脚本的写法就知道了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;$OUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;$TRACE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;解决方法是把cron job都写成一个脚本，然后 &lt;code&gt;cronic command&lt;/code&gt; 来调用，但是开发同学肯定不爽，SA也不爽。&lt;br&gt;
那就加单引号吧，bash脚本中加了单引号的所有特殊字符不会被展开，当然command里面的单引号得用转义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cronic &amp;#39;command&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;原来脚本中执行命令的部分使用&lt;code&gt;eval&lt;/code&gt;改写，顺带解决下重定向输出的bug（想想如果command中已经包含了重定向的操作，会发生什么奇怪的事情，2333）：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;$OUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;$TRACE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;完整脚本见 &lt;a href="https://gist.github.com/fangpsh/688b56c029147f44d879"&gt;cronic.sh&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外有一个Python版本的，见 &lt;a href="http://www.zlovezl.cn/articles/pycronic-makes-crontab-emails-painless/"&gt;pycronic: 使crontab的报警更无痛&lt;/a&gt;。&lt;/p&gt;</content><category term="2015"></category><category term="crontab"></category><category term="cronic"></category><category term="bash"></category></entry><entry><title>尝试解决openSUSE下zypper软件包名称自动补全的问题</title><link href="https://fangpsh.github.io/posts/2014/141216.html" rel="alternate"></link><published>2014-12-16T11:13:19+08:00</published><updated>2014-12-16T11:13:19+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2014-12-16:/posts/2014/141216.html</id><summary type="html">&lt;p&gt;一年前从debian 换到opensese的时候，很不习惯zypper在安装软件包的时候不能自动补全，添加到todolist里面，后来停用evernote 给忘记了，前几天上去整理笔记发现了，所以尝试性得解决了下，另外 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;一年前从debian 换到opensese的时候，很不习惯zypper在安装软件包的时候不能自动补全，添加到todolist里面，后来停用evernote 给忘记了，前几天上去整理笔记发现了，所以尝试性得解决了下，另外顺带修了一个小bug，当本地repo超过10条时，原来脚本生成的自动补全列表不全的问题。&lt;/p&gt;
&lt;p&gt;bash自带补全功能，要达到更好的补全效果需要安装bash-completion这个软件包，然后编写对应的补全脚本。关于bash-completion的内容，可以参考以下两个链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kodango.com/bash-competion-programming"&gt;编写 Bash 补全脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.debian-administration.org/article/317/An_introduction_to_bash_completion_part_2"&gt;An introduction to bash completion: part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件包名词的自动补全问题主要就是怎么快速的获取软件包的名称，然后作为列表供选。
一开始我是用zypper search 来获取，速度不堪忍受，（apt-get,aptitude 等的自动补全脚本是用apt-cache来获取，速度很快）。&lt;/p&gt;
&lt;p&gt;zypper se方式的脚本片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;echo&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;POSIX&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZYPPER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;se&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="s2"&gt;*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1,5&amp;#39;&lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
remove&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;echo&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;POSIX&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZYPPER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;se&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="s2"&gt;*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1,5&amp;#39;&lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;echo&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;POSIX&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZYPPER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;list-updates&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1,4&amp;#39;&lt;/span&gt;d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;后来看了下libzypp，又看到 zypp-NameReqPrv 这个工具，试了下，速度快了一些，基本可以用了，不过感觉还不是太理想，特别是zypper install 的时候，如果列表生成的数组过大，还是有点卡顿，瓶颈在要对zypp-NameReqPrv的输出结果做过滤。&lt;br&gt;
不知道还有没有更快的方式来获取软件列表，难道只能使用libzypp来编写？&lt;br&gt;
另外如果使用zsh，并且使用了on-my-zsh的话好像是可以自动补全。第一次补全时会有明显的卡顿，后面再使用就很流畅了，可能做了缓存？ 不知道是怎么做到的，可以学习学习，然后迁移到bash下。  &lt;/p&gt;
&lt;p&gt;zypp-NameReqPrv 方式的脚本片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cur&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;echo&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;POSIX&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZYPPNameReqPrv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$cur&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^［:blank:］*[0-9]+［:blank:］+&lt;/span&gt;&lt;span class="nv"&gt;$cur&lt;/span&gt;&lt;span class="s2"&gt;[a-Z0-9]*-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                           &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/-[0-9]+\..*//&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;

remove&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cur&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;echo&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;POSIX&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$ZYPPNameReqPrv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--installed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$cur&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^［:blank:］*[0-9]+［:blank:］+&lt;/span&gt;&lt;span class="nv"&gt;$cur&lt;/span&gt;&lt;span class="s2"&gt;[a-Z0-9]*-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                              &lt;/span&gt;cut&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/-[0-9]+\..*//&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用openSUSE + bash 的同学可以试一试，把&lt;a href="https://gist.github.com/fangpsh/86e13a771ccea24a206b"&gt;这份脚本&lt;/a&gt;拷贝至 &lt;code&gt;/etc/bash_completion.d/&lt;/code&gt; 下 。&lt;/p&gt;</content><category term="2014"></category><category term="opensuse"></category><category term="bash"></category></entry></feed>