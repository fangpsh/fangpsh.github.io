<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fangpsh's blog</title><link href="https://fangpsh.github.io/" rel="alternate"></link><link href="https://fangpsh.github.io/feeds/all.atom.xml" rel="self"></link><id>https://fangpsh.github.io/</id><updated>2018-02-06T00:00:00+08:00</updated><entry><title>《HTTP/2 基础教程》读书笔记</title><link href="https://fangpsh.github.io/posts/2018/2018-02-06.html" rel="alternate"></link><published>2018-02-06T00:00:00+08:00</published><updated>2018-02-06T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2018-02-06:/posts/2018/2018-02-06.html</id><summary type="html">&lt;p&gt;&lt;img alt="http2" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230227141517.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最近拿到一本新书：&lt;a href="https://book.douban.com/subject/27665112/"&gt;《HTTP/2 基础教程》&lt;/a&gt;，薄薄一本，除去附录100页不到，卖的挺贵，49元。《精通正则表达式》的译者余晟为这书写了序，也在他的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="http2" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230227141517.jpg"&gt;&lt;/p&gt;
&lt;p&gt;最近拿到一本新书：&lt;a href="https://book.douban.com/subject/27665112/"&gt;《HTTP/2 基础教程》&lt;/a&gt;，薄薄一本，除去附录100页不到，卖的挺贵，49元。《精通正则表达式》的译者余晟为这书写了序，也在他的个人公众号上推荐，读完却觉得作为基础教程还不错，翻译上觉得略生硬。作点简单的笔记，方便以后“按图索骥”。&lt;/p&gt;
&lt;h2&gt;3.1.2 关键性能指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;延迟&lt;ul&gt;
&lt;li&gt;延迟是制约Web 性能的主要瓶颈，后文还会提到，丢包会严重影响HTTP/2 的性能&lt;/li&gt;
&lt;li&gt;这就是为什么CDN 的边缘节点要近可能的靠近目标用户，做到本地覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;带宽&lt;ul&gt;
&lt;li&gt;带宽可能会成为性能的瓶颈，不过对于普通的网页，目前大多数用户的带宽已经不是瓶颈，延时和丢包更加重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS 查询&lt;ul&gt;
&lt;li&gt;网址的域名解析，网页内各项资源的域名解析时间，这块查询时间占比较大，特别是在移动端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立连接的时间&lt;ul&gt;
&lt;li&gt;TCP 三次握手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLS 协商时间&lt;ul&gt;
&lt;li&gt;采用HTTPS 之后，TLS 握手，TLS 1.2 需要消耗2个RTT，不过新的TLS1.3 只需要1个RTT。&lt;/li&gt;
&lt;li&gt;针对TLS 有非常多的优化手段，建议阅读&lt;a href="https://book.douban.com/subject/25856314/"&gt;《Web 性能权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首字节时间（TTFB）&lt;ul&gt;
&lt;li&gt;客户端开始访问网页，到收到服务器响应的第一个字节的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容下载时间&lt;ul&gt;
&lt;li&gt;从客户端开始访问，到最后一个响应字节到达客户端的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开始渲染时间&lt;ul&gt;
&lt;li&gt;用户看到空白页面的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档加载完成时间（又叫页面加载时间）&lt;ul&gt;
&lt;li&gt;浏览器认为页面加载完毕的时长。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;互联网发展，遇到的挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更多的字节：页面资源的体积变大&lt;/li&gt;
&lt;li&gt;更多的资源：页面资源数量变多&lt;/li&gt;
&lt;li&gt;更高的复杂度： 页面越来越复杂，渲染变长&lt;/li&gt;
&lt;li&gt;更多的域名： 一个页面包含的域名越来越多，增加了DNS 查询耗时、建立连接耗时、TLS 协商耗时。&lt;/li&gt;
&lt;li&gt;更多的TCP socket：浏览器会对同一个域名开启多个连接，这增加了服务器协商耗时，加重设备负担，有可能导致网络过载等问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3.1.3 HTTP/1 的问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;队头堵塞&lt;ul&gt;
&lt;li&gt;HTTP/1 有个特性叫管道化（pipelining），允许一次发送一组请求，当时只能按照发送顺序依次接收请求，&lt;/li&gt;
&lt;li&gt;在应答过程中，如果有一个请求阻塞了，后续所有工作都会被阻塞。现代浏览器会对单个域名开启6个连接，当时每个连接还是会受到“队头阻塞”的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;低效的TCP 利用&lt;ul&gt;
&lt;li&gt;拥塞控制算法，慢启动，以及拥塞避免，TCP 并不高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;臃肿的消息首部&lt;ul&gt;
&lt;li&gt;HTTP/1 消息头部无法被压缩，如果再带上cookies，有个几千字节很常见。大量请求下，消息头的占比不可忽视。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;受限的优先级设置&lt;ul&gt;
&lt;li&gt;处理高优先级的资源时，不会对低优先级的资源发起请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三方资源&lt;ul&gt;
&lt;li&gt;日益增多的第三方资源引用，消耗了大量资源。HTTP/2 对此也束手无策。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3.2.1 Web 性能的最佳实践&lt;/h2&gt;
&lt;h3&gt;1. DNS 查询优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;限制不同域名的数量。&lt;/li&gt;
&lt;li&gt;保证低限度的解析延迟，定期监控用户分布所有地区的解析时间。&lt;/li&gt;
&lt;li&gt;在主体页面HTML 活响应中利用&lt;a href="https://www.w3.org/TR/resource-hints/#dns-prefetch"&gt;DNS 预取命令&lt;/a&gt;。
 例：
 &lt;code&gt;&amp;lt;link rel="dns-prefetch" hrefp="//ajax.googleapis.com"&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 优化TCP 连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;利用&lt;a href="https://www.w3.org/TR/resource-hints/#preconnect"&gt;preconnect&lt;/a&gt; 指令。
 例：
 &lt;code&gt;&amp;lt;link rel="preconnect" href="//fonts.example.com" crossorigin&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽早终止并响应，借助CDN，降低RTT，尽快响应。&lt;/li&gt;
&lt;li&gt;实施最新的&lt;a href="https://istlsfastyet.com/"&gt;TLS 最佳实践&lt;/a&gt;来优化HTTPS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 避免重定向&lt;/h3&gt;
&lt;p&gt;重定向通常会触发与额外域名建立连接，简单的解决方案就是彻底消灭重定向。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用CDN 代替客户端在云端实现重定向，意思就是让CDN 重定向去取回资源再返回给客户端。&lt;/li&gt;
&lt;li&gt;如果是同一域名的重定向，利用Web 服务器上的rewrite 规则，避免重定向。例如Nginx、Apache 里面的rewrite，客户端无需再发起一次请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 客户端缓存&lt;/h3&gt;
&lt;p&gt;客户端直接使用本地缓存是最快的。建议所有的静态资源名称都带上一个随机的ID，然后给一个超长的缓存时间即可。部分需要更新的资源，可以按需调整缓存时间。&lt;/p&gt;
&lt;h3&gt;5. 网络边缘的缓存&lt;/h3&gt;
&lt;p&gt;利用CDN，缓存部分数据。如果一份资源需要缓存，它必须满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在多用户间可共享，并且&lt;/li&gt;
&lt;li&gt;能够接受一定程度的旧数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户的隐私信息、以及贵时间敏感的内容都不可以缓存。&lt;/p&gt;
&lt;h3&gt;6. 条件缓存&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;Last-Modified-Since&lt;/code&gt;，&lt;code&gt;ETag&lt;/code&gt; 等头部检查服务端资源更新情况，如果没更新，服务端返回304，否则返回新的资源。&lt;/p&gt;
&lt;h3&gt;7. 压缩和代码极简化&lt;/h3&gt;
&lt;p&gt;去除前端代码里面多余的注释、空格、换行，牺牲可读性降低体积，再通过gzip、deflate、Brotli等算法压缩传输。&lt;/p&gt;
&lt;h3&gt;8. 避免阻塞CSS/JS&lt;/h3&gt;
&lt;p&gt;CSS 要放在head 标签里，在任何JS 和图片前面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定期校验JS 资源的使用情况，清楚不再需要的资源。&lt;/li&gt;
&lt;li&gt;如果JS 执行顺序无关紧要，并且必须在onload 事件触发之前运行，可以设置&lt;a href="http://caniuse.com/#search=async"&gt;async 属性&lt;/a&gt;，
 例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &amp;lt; script async src=&amp;quot;/js/myfile.js&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;如果JS 执行顺序很重要，并且也能接受脚本在DOM 加载完之后运行，可以使用defer 属性，
 例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &amp;lt;script defer src=&amp;quot;/js/myjs.js&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;对于不行影响到页面初次展示的JS脚本，必须在onload 事件触发之后请求（处理）它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;9. 图片优化&lt;/h3&gt;
&lt;p&gt;图片越来越多，针对图片的2条优化建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除图片元信息，例如题材、地理信息、时间戳、尺寸和像素信息等。&lt;/li&gt;
&lt;li&gt;针对不同设备提供不同尺寸的图片，另外例如七牛、又拍云等CDN 厂商都提供图片处理服务，使用起来简单快捷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于图片优化可以阅读书籍：&lt;a href="http://shop.oreilly.com/product/0636920039730.do"&gt;《High Performance Images》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;之前也整理过一篇：[[图片优化笔记]]。&lt;/p&gt;
&lt;h2&gt;3.2.2 反模式&lt;/h2&gt;
&lt;h2&gt;4.3 撤销针对HTTP/1.1 的优化&lt;/h2&gt;
&lt;h2&gt;6.7 HTTP/2 反模式&lt;/h2&gt;
&lt;p&gt;一些在HTTP/1.X 上使用的优化手段，若应用到HTTP/2 上，会适得其反，书里有三个地方都提到了“反模式”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成精灵图和资源合并/内联：对于HTTP/2 来说，使用精灵图没有意义。也不要将资源进行合并，缓存控制上会不方便，粒度太粗。&lt;/li&gt;
&lt;li&gt;域名拆分：迁移到HTTP/2 需要收拢域名。&lt;/li&gt;
&lt;li&gt;禁用cookie的域名：HTTP/2 中，头部信息会被压缩，无需再对特定域名禁用cookie。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="null" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230227141750.png"&gt;&lt;/p&gt;
&lt;h2&gt;5. HTTP/2 协议&lt;/h2&gt;
&lt;p&gt;第五章介绍了HTTP/2 协议的一些细节，帧结构、流、流量控制、优先级、服务端推送、首部压缩等内容，内容很多，每一块要理解透彻内容很多，具体还是得看书，外加查询其他资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/ht你tp2/?hl=zh-cn"&gt;HTTP/2 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/creeperyang/blog/issues/23"&gt;HTTP2简介和基于HTTP2的Web优化 #23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogjava.net/yongboy/archive/2015/03/20/423655.html"&gt;HTTP/2笔记之帧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imququ.com/post/header-compression-in-http2.html"&gt;HTTP/2 头部压缩技术介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blogjava.net/yongboy/archive/2015/03/19/423611.html"&gt;HTTP/2笔记之流和多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1r7QXGYOLCh4fcUq0jDdDwKJWNqWK1o4xMtYpKZCJYjM/present?slide=id.gae999cde7_0_167"&gt;HTTP2 is here, let's optimize!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://http2.github.io/http2-spec/"&gt;Hypertext Transfer Protocol Version 2 (HTTP/2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. HTTP/2 性能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;并非所有请求在任何情况下都会从HTTP/2 受益；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟：超过一定带宽之后（实验值是5Mbit/s ），增加带宽不会减少延迟，RTT 对性能的影响更新敏感；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丢包：丢包对HTTP/2 影响非常大，因为一个域名就一个连接。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;性能优化因人而异&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注重测试，要遵循业界推荐的方式，但也不要陷入过早优化的陷阱，应当让数据为你的优化指引方向。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;8. HTTP/2 调试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chrome 开发者工具&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chrome://net-internals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Inspect -&amp;gt; Network&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firefox 开发者工具&lt;/li&gt;
&lt;li&gt;iOS：Charles Proxy&lt;/li&gt;
&lt;li&gt;Android：手机端-开发者模式-USB调试（USB debugging），PC-Chrome-开发者工具-Remote devices&lt;/li&gt;
&lt;li&gt;WebPagetest&lt;/li&gt;
&lt;li&gt;OpenSSL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nghttp2.org"&gt;nghttp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl -v --http2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bradfitz/http2/tree/master/h2i"&gt;h2i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;/ul&gt;</content><category term="2018"></category><category term="http"></category></entry><entry><title>《Web 性能权威指南》读书笔记</title><link href="https://fangpsh.github.io/posts/2016/2016-11-01.html" rel="alternate"></link><published>2016-11-01T00:00:00+08:00</published><updated>2016-11-01T00:00:00+08:00</updated><author><name>fangpsh</name></author><id>tag:fangpsh.github.io,2016-11-01:/posts/2016/2016-11-01.html</id><summary type="html">&lt;p&gt;&lt;img alt="bookcover" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164135.png"&gt;&lt;/p&gt;
&lt;p&gt;看&lt;a href="https://book.douban.com/subject/25856314/"&gt;《Web 性能权威指南》&lt;/a&gt;的起因是在看&lt;a href="https://book.douban.com/subject/26869219/"&gt;《HTTPS 权威指南》&lt;/a&gt;的时候，看到优化相关的，然后就延伸到想看一下这本书。&lt;br&gt;
这本书，作者提供了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="bookcover" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164135.png"&gt;&lt;/p&gt;
&lt;p&gt;看&lt;a href="https://book.douban.com/subject/25856314/"&gt;《Web 性能权威指南》&lt;/a&gt;的起因是在看&lt;a href="https://book.douban.com/subject/26869219/"&gt;《HTTPS 权威指南》&lt;/a&gt;的时候，看到优化相关的，然后就延伸到想看一下这本书。&lt;br&gt;
这本书，作者提供了免费的&lt;a href="https://hpbn.co/"&gt;在线英文版&lt;/a&gt;，建议还是看英文的，中文翻译版有些地方略生硬。&lt;/p&gt;
&lt;h2&gt;TCP 优化&lt;/h2&gt;
&lt;p&gt;这部分从协议出发，讲解了优化的要点。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三次握手带来的延迟使得创建每创建一个新的TCP连接都要付出很大的代价。而这也决定了提高TCP应用性能的关键，在于想办法重用连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到重用连接在后续的HTTP 优化都是重点。&lt;br&gt;
第二章分内容和《HTTPS 权威指南》的9.1 有重合，可以都看下。  &lt;/p&gt;
&lt;h3&gt;把服务器内核升级到最新版本（Linux： 3.2+)&lt;/h3&gt;
&lt;p&gt;新内核能获得更好的性能，例如采用了PRR，比例降速算法。&lt;/p&gt;
&lt;h3&gt;确保cwnd 大小为10；&lt;/h3&gt;
&lt;p&gt;增大拥塞窗口，10表示10个&lt;a href="https://en.wikipedia.org/wiki/Maximum_segment_size"&gt;MSS&lt;/a&gt;，以太网标准的MSS 是1460。&lt;br&gt;
前面提到内核升级也可以带来好处，Linux 3.2+ 的内核，cwnd都是默认10。&lt;br&gt;
&lt;img alt="OS_CWND" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164224.png"&gt;&lt;br&gt;
图片来源：cdnplanet.com&lt;/p&gt;
&lt;p&gt;关于更改initcwnd、查看系统的initcwnd，可以参考:&lt;br&gt;
&lt;a href="http://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/"&gt;Tuning initcwnd for optimum performance&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;这一部分可以再看看火丁笔记的&lt;a href="http://huoding.com/2013/11/21/299"&gt;《浅谈TCP优化》&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;禁用空闲后的慢启动&lt;/h3&gt;
&lt;p&gt;主要是存在长连接的时候，要确保把这个给关了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.tcp_slow_start_after_idle&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;确保启动窗口缩放&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sysctl&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;net.ipv4.tcp_windows_scaling&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;减少传输冗余数据&lt;/h3&gt;
&lt;p&gt;应用程序注意能少发数据就少发，这在后面的移动设备App优化上也是重点，移动网络的启动更加耗时和耗电。&lt;/p&gt;
&lt;h3&gt;压缩要传输的数据&lt;/h3&gt;
&lt;p&gt;例如web server 开启gzip，对js、css 做压缩。&lt;/p&gt;
&lt;h3&gt;把服务器放到离用户近的地方减少往返的时间&lt;/h3&gt;
&lt;p&gt;部署CDN，一方面边缘节点能够缓存文件，直接返回给用户。如果是需要回源的话，边缘节点如果能和回源保持长连接，这样可以降低用户访问整个耗时，因为用户只需要和边缘节点三次握手，距离近，耗时更短。&lt;br&gt;
另外在部署HTTPS 的时候，除了TCP握手，还需要TLS握手，如果让边缘节点提供HTTPS，然后以HTTP向后反代，也是一种优化吧。现在CDN 厂商都支持HTTPS了，配置回源的时候选择HTTP 相比HTTPS 会更快，给源站的压力也更小一些，而且在IDC之间，运营商那台恶心的劫持问题应该少很多吧。&lt;/p&gt;
&lt;h3&gt;尽最大可能重用已经建立的TCP 连接&lt;/h3&gt;
&lt;h2&gt;UDP 优化&lt;/h2&gt;
&lt;p&gt;UDP 这部分，在工作中遇到的少，没太多体会。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tolerate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;wide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Internet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;conditions&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;transmission&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;perform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;congestion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;control&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;over&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;traffic&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bandwidth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;similar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;TCP&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;off&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;retransmission&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;counters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;loss&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;datagrams&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;exceed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;MTU&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;handle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;datagram&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;loss&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;duplication&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;reordering&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;robust&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;delivery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;delays&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;minutes&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;IPv4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;UDP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;checksum&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;IPv6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;checksum&lt;/span&gt;.
&lt;span class="nv"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;may&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;keepalives&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;needed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;minimum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;seconds&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;TLS 优化&lt;/h2&gt;
&lt;p&gt;关于TLS 优化还可以看《HTTPS 权威指南》的9.2：TLS协议优化。&lt;br&gt;
另外淘宝的这份分析非常不错：&lt;a href="http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf"&gt;《淘宝HTTPS探索》&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;SSL卸载&lt;/h3&gt;
&lt;p&gt;在保证兼容性的情况下，升级到新版的openSSL，可以有更好的性能。&lt;br&gt;
HPBN的在这一章的建议是用物理机，纯CPU计算卸载，举了Google和Facebook为例。不过如果是使用的云服务的话，部分云厂商在负载均衡上都提供了SSL卸载的功能，不过感觉对ALPN这些协议的支持不知如何，所以还没试用过。云服务虚机+Nginx 来做卸载还是有少许压力的，高峰期的时候。Intel之类的硬件，甚至F5 这种，感觉成本有点高，不过性能确实非常好，如果有条件的话，可以上这类设备。不过使用了这些设备之后，算法升级、调优的自由度可能就不大了，需要综合考虑。  &lt;/p&gt;
&lt;p&gt;为了降低压力，可以对加密套件的选择进行优化，参考《HTTPS权威指南》一书的测试结果：&lt;br&gt;
&lt;img alt="TLS_Speed" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164304.png"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="TLS_Speed_taobao" src="https://raw.githubusercontent.com/roOtPasswd/test/public-images/images/2023/20230228164345.png"&gt;  &lt;/p&gt;
&lt;p&gt;建议：优先选择ECDHE，禁用DHE。&lt;/p&gt;
&lt;h3&gt;尽早握手&lt;/h3&gt;
&lt;p&gt;类似TCP的三次握手，TLS的握手过程也可以通过类似CDN的网络进行优化。在距离用户较近的地方搭建代理服务器，然后和后端保持长连接，这样降低用户到服务整个的握手时间。&lt;/p&gt;
&lt;h3&gt;证书优化&lt;/h3&gt;
&lt;p&gt;《HTTPS权威指南》提到的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用尽可能少的证书&lt;/li&gt;
&lt;li&gt;只包含必须的证书&lt;/li&gt;
&lt;li&gt;提供完整的证书链&lt;/li&gt;
&lt;li&gt;使用椭圆曲线证书链&lt;/li&gt;
&lt;li&gt;小心同一张证书绑定过多域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个常见的错误是在证书链里面包含根证书，毫无意义，还加大了传输开销。&lt;/p&gt;
&lt;h3&gt;优化TLS 记录大小&lt;/h3&gt;
&lt;p&gt;TLS 太小会造成浪费，头信息的比例过大。如果太大，会造成延迟，如果万一丢包，会非常糟糕。参考&lt;a href="http://fangpeishi.com/optimizing-tls-record-size.html"&gt;TLS Record Size 优化笔记&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;禁用服务器的TLS压缩，安全性问题，Nginx的话默认是不支持的；&lt;/li&gt;
&lt;li&gt;确保证书链不会超过拥塞窗口大小；&lt;/li&gt;
&lt;li&gt;启用会话缓存和无状态恢复，参考nginx 的 ssl_session_cache，ssl_session_timeout等。&lt;/li&gt;
&lt;li&gt;配置ssl_stapling&lt;/li&gt;
&lt;li&gt;配置ssl_session_tickets&lt;/li&gt;
&lt;li&gt;开启HSTS，这个开启得非常小心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;无线网络优化&lt;/h2&gt;
&lt;p&gt;这部分内容介绍了很多关于移动网络的基础知识，也是为后面的HTTP优化做铺垫，毕竟现在移动App 非常发达。总的来说，移动设备上一次请求的代价更大，时间上和耗电上，所以减少请求和重用连接非常重要。&lt;/p&gt;
&lt;h2&gt;HTTP 优化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 1.0 升级到HTTP1.1&lt;/li&gt;
&lt;li&gt;减少DNS查询&lt;/li&gt;
&lt;li&gt;减少HTTP请求&lt;/li&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;添加Expires 头部并配置ETag标签&lt;/li&gt;
&lt;li&gt;Gzip 压缩资源&lt;/li&gt;
&lt;li&gt;避免HTTP 重定向&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用持久连接&lt;/h3&gt;
&lt;h3&gt;HTTP管道&lt;/h3&gt;
&lt;p&gt;消除部分等待时间。&lt;/p&gt;
&lt;h3&gt;域名分区&lt;/h3&gt;
&lt;p&gt;这个使用要适量，不让会适得其反。&lt;/p&gt;
&lt;h3&gt;拼接、压缩静态资源&lt;/h3&gt;
&lt;p&gt;直接参考&lt;a href="https://ngxpagespeed.com"&gt;ngxpagespeed.com&lt;/a&gt; 就可以了。&lt;/p&gt;
&lt;h3&gt;升级到HTTP 2.0&lt;/h3&gt;
&lt;p&gt;要注意不要把在HTTP 1.1 上的优化手段用到HTTP 2.0 上，会适得其反。&lt;/p&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;书中还有大量其他内容，一些关于TCP、HTTP的基础介绍，以及移动网络、XMLHttpRequest、WebSocket、WebRTC等内容。&lt;/p&gt;</content><category term="2016"></category><category term="web"></category><category term="http"></category><category term="https"></category></entry></feed>